[
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.18",
    "question_text": "Consider the program below:\n#include <stdio.h>\nint fun(int n, int *f_p) {\n    int t, f;\n    if (n <= 1) {\n        *f_p = 1;\n        return 1;\n    }\n    t = fun (n-1, f_p);\n    f = t + *f_p;\n    *f_p = t ;\n    return f;\n}\nint main() {\n    int x = 15;\n    printf (\"%d\\n\", fun(5, &x));\n    return 0;\n}\nThe value printed is :\n(A) 6\n(B) 8\n(C) 14\n(D) 15",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Recursion.",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.37",
    "question_text": "What is the maximum height of any AVL-tree with 7 nodes? Assume that the height of a tree with a single node is 0.\n(A) 2\n(B) 3\n(C) 4\n(D) 5",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Trees, binary search trees, binary heaps, graphs.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.59",
    "question_text": "Consider a binary max-heap implemented using an array.\nWhich one of the following array represents a binary max-heap ?\n(A) { 25, 12, 16, 13, 10, 8, 14 }\n(B) { 25, 14, 13, 16, 10, 8, 12 }\n(C) { 25, 14, 16, 13, 10, 8, 12 }\n(D) { 25, 14, 12, 13, 10, 8, 16 }",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.60",
    "question_text": "What is the content of the array after two delete operations on the correct answer to the previous question ?\n(A) { 14, 13, 12, 10, 8 }\n(B) { 14, 12, 13, 8, 10 }\n(C) { 14, 13, 8, 12, 10 }\n(D) { 14, 13, 12, 8, 10 }",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2010,
    "paper_code": "CS",
    "question_no": "10",
    "question_text": "In a binary tree with n nodes, every node has an odd number of descendants. Every node is considered to be its own descendant. What is the number of nodes in the tree that have exactly one child?\n(A) 0\n(B) 1\n(C) (n−1)/2\n(D) n−1",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATEFORUM 2010 CS",
    "confidence": 1
  },
  {
    "year": 2010,
    "paper_code": "CS",
    "question_no": "11",
    "question_text": "What does the following program print?\n#include <stdio.h>\nvoid f (int * p, int * g) {\n  p = q;\n  *p = 2;\n}\nint i = 0, j = 1;\nint main (){\n  f(&i, & j);\n  printf(\"%d %d \\n\", i, j);\n  return 0;\n}\n(A) 2 2\n(B) 2 1\n(C) 0 1\n(D) 0 2",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATEFORUM 2010 CS",
    "confidence": 1
  },
  {
    "year": 2010,
    "paper_code": "CS",
    "question_no": "35",
    "question_text": "What is the value printed by the following C program?\n#include <stdio.h>\nint f(int *a, int n)\n{\n  if (n <= 0) return 0;\n  else if (*a % 2 == 0) return *a + f(a + 1, n - 1);\n  else return *a - f(a + 1, n - 1);\n}\nint main ()\n{\n  int a[] = {12, 7, 13, 4, 11, 6};\n  printf(\"%d\", f(a, 6));\n  return 0;\n}\n(A) -9\n(B) 5\n(C) 15\n(D) 19",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Recursion",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATEFORUM 2010 CS",
    "confidence": 1
  },
  {
    "year": 2010,
    "paper_code": "CS",
    "question_no": "36",
    "question_text": "The following C function takes a simply-linked list as input argument. It modifies the list by moving the last element to the front of the list and returns the modified list. Some part of the code is left blank.\n\ntypedef struct node {\n  int value;\n  struct node *next;\n} Node;\n\nNode *move_to_front(Node *head) {\n  Node *p, *q;\n  if ((head == NULL) || (head->next == NULL)) return head;\n  q = NULL; p = head;\n  while (p->next != NULL) {\n    q = p;\n    p = p->next;\n  }\n  ___________________________\n  return head;\n}\n\nChoose the correct alternative to replace the blank line.\n(A) q = NULL; p->next = head; head = p;\n(B) q->next = NULL; head = p; p->next = head;\n(C) head = p; p->next = q; q->next = NULL;\n(D) q->next = NULL; p->next = head; head = p;",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATEFORUM 2010 CS",
    "confidence": 1
  },
  {
    "year": 2011,
    "paper_code": "CS",
    "question_no": "Q.22",
    "question_text": "What does the following fragment of C program print?\nchar c[] = \"GATE2011\";\nchar *p = c;\nprintf(\"%s\", p + p[3] - p[1]);\n(A) GATE2011\n(B) E2011\n(C) 2011\n(D) 011",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE2011_CS",
    "confidence": 1
  },
  {
    "year": 2011,
    "paper_code": "CS",
    "question_no": "Q.23",
    "question_text": "A max-heap is a heap where the value of each parent is greater than or equal to the value of its children. Which of the following is a max-heap?",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "binary heaps",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE2011_CS",
    "confidence": 1
  },
  {
    "year": 2011,
    "paper_code": "CS",
    "question_no": "Q.29",
    "question_text": "We are given a set of n distinct elements and an unlabeled binary tree with n nodes. In how many ways can we populate the tree with the given set so that it becomes a binary search tree?\n(A) 0\n(B) 1\n(C) n!\n(D) 1/(n+1) * 2nCn",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "binary search trees",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE2011_CS",
    "confidence": 1
  },
  {
    "year": 2011,
    "paper_code": "CS",
    "question_no": "Q.48",
    "question_text": "Common Data for Questions 48 and 49:\nConsider the following recursive C function that takes two arguments.\nunsigned int foo(unsigned int n, unsigned int r) {\n  if (n>0) return ((n%r) + foo(n/r, r));\n  else return 0;\n}\nWhat is the return value of the function foo when it is called as foo(345, 10)?\n(A) 345\n(B) 12\n(C) 5\n(D) 3",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Recursion",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2011_CS",
    "confidence": 1
  },
  {
    "year": 2011,
    "paper_code": "CS",
    "question_no": "Q.49",
    "question_text": "Common Data for Questions 48 and 49:\nConsider the following recursive C function that takes two arguments.\nunsigned int foo(unsigned int n, unsigned int r) {\n  if (n>0) return ((n%r) + foo(n/r, r));\n  else return 0;\n}\nWhat is the return value of the function foo when it is called as foo(513, 2)?\n(A) 9\n(B) 8\n(C) 5\n(D) 2",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Recursion",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2011_CS",
    "confidence": 1
  },
  {
    "year": 2012,
    "paper_code": "CS",
    "question_no": "Q.3",
    "question_text": "What will be the output of the following C program segment?\nchar inChar = 'A';\nswitch ( inChar ) {\ncase 'A': printf (“Choice A\\ n\") ;\ncase 'B':\ncase ‘C’: printf (“Choice B\");\ncase 'D':\ncase 'E':\ndefault : printf ( “ No Choice\"); }",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C.",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2012 Question Paper",
    "confidence": 1
  },
  {
    "year": 2012,
    "paper_code": "CS",
    "question_no": "Q.35",
    "question_text": "Suppose a circular queue of capacity (n −1) elements is implemented with an array of n elements. Assume that the insertion and deletion operations are carried out using REAR and FRONT as array index variables, respectively. Initially, REAR = FRONT = 0. The conditions to detect queue full and queue empty are",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2012 Question Paper",
    "confidence": 1
  },
  {
    "year": 2012,
    "paper_code": "CS",
    "question_no": "Q.47",
    "question_text": "The height of a tree is defined as the number of edges on the longest path in the tree. The function shown in the pseudocode below is invoked as height(root) to compute the height of a binary tree rooted at the tree pointer root. ... The appropriate expressions for the two boxes B1 and B2 are",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Recursion.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2012 Question Paper",
    "confidence": 1
  },
  {
    "year": 2012,
    "paper_code": "CS",
    "question_no": "Q.48",
    "question_text": "Consider the following C code segment. ... What output will be generated by the given code segment?",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2012 Question Paper",
    "confidence": 1
  },
  {
    "year": 2012,
    "paper_code": "CS",
    "question_no": "Q.49",
    "question_text": "What output will be generated by the given code segment if: Line 1 is replaced by auto int a = 1; Line 2 is replaced by register int a = 2;",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2012 Question Paper",
    "confidence": 1
  },
  {
    "year": 2013,
    "paper_code": "CS",
    "question_no": "Q.7",
    "question_text": "Which one of the following is the tightest upper bound that represents the time complexity of inserting an object into a binary search tree of n nodes?\n(A) O(1)\n(B) O(log n)\n(C) O(n)\n(D) O(n log n)",
    "subject": "Programming and Data Structures",
    "chapter": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs.",
    "subtopic": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs.",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2013 Paper",
    "confidence": 0.9
  },
  {
    "year": 2014,
    "paper_code": "CS",
    "question_no": "10",
    "question_text": "Consider the following program in C language:\n#include <stdio.h>\nmain()\n{\n    int i;\n    int *pi = &i;\n    scanf(\"%d\",pi);\n    printf(\"%d\\n\", i+5);\n}\nWhich one of the following statements is TRUE?\n(A) Compilation fails.\n(B) Execution results in a run-time error.\n(C) On execution, the value printed is 5 more than the address of variable i.\n(D) On execution, the value printed is 5 more than the integer value entered.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE2014_CS_OCR",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS SET-3",
    "question_no": "Q.10",
    "question_text": "Let A be a square matrix of size n × n. Consider the following pseudocode. What is the expected output?\n\nC = 100;\nfor i = 1 to n do\n  for j = 1 to n do\n  {\n    Temp = A[i][j] + C;\n    A[i][j] = A[j][i];\n    A[j][i] = Temp – C;\n  }\nfor i = 1 to n do\n  for j = 1 to n do\n    output (A[i][j]);\n\n(A) The matrix A itself\n(B) Transpose of the matrix A\n(C) Adding 100 to the upper diagonal elements and subtracting 100 from lower diagonal elements of A\n(D) None of the above",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Arrays",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE2014_CS_SET3",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS SET-3",
    "question_no": "Q.12",
    "question_text": "Consider the following rooted tree with the vertex labeled P as the root:\n\n[Image of a general tree]\n\nThe order in which the nodes are visited during an in-order traversal of the tree is\n\n(A) SQPTRWUV\n(B) SQPTUWRV\n(C) SQPTWUVR\n(D) SQPTRUWV",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "trees",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE2014_CS_SET3",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS-2",
    "question_no": "10",
    "question_text": "Consider the function func shown below:\nint func(int num) {\n  int count = 0;\n  while (num) {\n    count++;\n    num>>= 1;\n  }\n  return (count);\n}\nThe value returned by func(435) is",
    "subject": "Programming and Data Structures",
    "chapter": "Programming in C",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2014 CS SET-2",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS-2",
    "question_no": "11",
    "question_text": "Suppose n and p are unsigned int variables in a C program. We wish to set p to nC3. If n is large, which one of the following statements is most likely to set p correctly?",
    "subject": "Programming and Data Structures",
    "chapter": "Programming in C",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2014 CS SET-2",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS-2",
    "question_no": "12",
    "question_text": "A priority queue is implemented as a Max-Heap. Initially, it has 5 elements. The level-order traversal of the heap is: 10, 8, 5, 3, 2. Two new elements 1 and 7 are inserted into the heap in that order. The level-order traversal of the heap after the insertion of the elements is:",
    "subject": "Programming and Data Structures",
    "chapter": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "subtopic": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2014 CS SET-2",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS-2",
    "question_no": "39",
    "question_text": "Consider the expression tree shown. Each leaf represents a numerical value, which can either be 0 or 1. Over all possible choices of the values at the leaves, the maximum possible value of the expression represented by the tree is",
    "subject": "Programming and Data Structures",
    "chapter": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "subtopic": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2014 CS SET-2",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS-2",
    "question_no": "40",
    "question_text": "Consider the following function\ndouble f(double x) {\n  if (abs(x*x - 3) < 0.01) return x;\n  else return f(x/2 + 1.5/x);\n}\nGive a value q (to 2 decimals) such that f(q) will return q:",
    "subject": "Programming and Data Structures",
    "chapter": "Recursion",
    "subtopic": "Recursion",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2014 CS SET-2",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS-2",
    "question_no": "41",
    "question_text": "Suppose a stack implementation supports an instruction REVERSE, which reverses the order of elements on the stack, in addition to the PUSH and POP instructions. Which one of the following statements is TRUE with respect to this modified stack?",
    "subject": "Programming and Data Structures",
    "chapter": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "subtopic": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2014 CS SET-2",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS-2",
    "question_no": "42",
    "question_text": "Consider the C function given below.\nint f(int j) {\n  static int i = 50;\n  int k;\n  if (i == j) {\n    printf(\"something\");\n    k = f(i);\n    return 0;\n  }\n  else return 0;\n}\nWhich one of the following is TRUE?",
    "subject": "Programming and Data Structures",
    "chapter": "Programming in C",
    "subtopic": "Programming in C",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2014 CS SET-2",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "10",
    "question_text": "A binary tree T has 20 leaves. The number of nodes in T having two children is __________.",
    "subject": "Programming and Data Structures",
    "chapter": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "subtopic": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "theoretical_practical": "theoretical",
    "marks": null,
    "provenance": "GATE 2015 Examination - CS (Set 2, 7th February, Afternoon Session)",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "11",
    "question_text": "Consider the following C function.\n\nint fun(int n) {\n  int x=1, k;\n  if (n==1) return x;\n  for (k=1; k<n; ++k)\n    x = x + fun(k) * fun(n-k);\n  return x;\n}\n\nThe return value of fun(5) is __________.",
    "subject": "Programming and Data Structures",
    "chapter": "Recursion",
    "subtopic": "Recursion",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 Examination - CS (Set 2, 7th February, Afternoon Session)",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "12",
    "question_text": "The result evaluating the postfix expression 10 5 + 60 6 / * 8 – is\n(A) 284\n(B) 213\n(C) 142\n(D) 71",
    "subject": "Programming and Data Structures",
    "chapter": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs.",
    "subtopic": "stacks",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "13",
    "question_text": "While inserting the elements 71, 65, 84, 69, 67, 83 in an empty binary search tree (BST) in the sequence shown, the element in the lowest level is\n(A) 65\n(B) 67\n(C) 69\n(D) 83",
    "subject": "Programming and Data Structures",
    "chapter": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs.",
    "subtopic": "binary search trees",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "15",
    "question_text": "Consider the following function written in the C programming language.\n\nvoid foo(char *a) {\n  if (*a && *a != ' ') {\n    foo(a+1);\n    putchar(*a);\n  }\n}\n\nThe output of the above function on input “ABCD EFGH” is\n(A) ABCD EFGH\n(B) ABCD\n(C) HGFE DCBA\n(D) DCBA",
    "subject": "Programming and Data Structures",
    "chapter": "Programming in C",
    "subtopic": "Recursion",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 Examination - CS (Set 2, 7th February, Afternoon Session)",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "19",
    "question_text": "Consider the following array of elements.\n⟨89, 19, 50, 17, 12, 15, 2, 5, 7, 11, 6, 9, 100⟩\nThe minimum number of interchanges needed to convert it into a max-heap is\n(A) 4\n(B) 5\n(C) 2\n(D) 3",
    "subject": "Programming and Data Structures",
    "chapter": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs.",
    "subtopic": "binary heaps",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "25",
    "question_text": "Consider a binary tree T that has 200 leaf nodes. Then, the number of nodes in T that have exactly two children are _________.",
    "subject": "Programming and Data Structures",
    "chapter": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs.",
    "subtopic": "trees",
    "theoretical_practical": "theoretical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "26",
    "question_text": "Consider the following C program.\n#include<stdio.h>\nint main( )\n{\n    static int a[ ] = {10, 20, 30, 40, 50};\n    static int *p[ ] = {a, a+3, a+4, a+1, a+2};\n    int **ptr = p;\n    ptr++;\n    printf(\"%d%d\", ptr-p, **ptr);\n}\nThe output of the program is _________.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming in C.",
    "subtopic": "Programming in C.",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "31",
    "question_text": "A Young tableau is a 2D array of integers increasing from left to right and from top to bottom. Any unfilled entries are marked with ∞, and hence there cannot be any entry to the right of, or below a ∞. The following Young tableau consists of unique entries.\n[1 2 5 14; 3 4 6 23; 10 12 18 25; 31 ∞ ∞ ∞]\nWhen an element is removed from a Young tableau, other elements should be moved into its place so that the resulting table is still a Young tableau (unfilled entries may be filled in with a ∞). The minimum number of entries (other than 1) to be shifted, to remove 1 from the given Young tableau is __________.",
    "subject": "Programming and Data Structures",
    "chapter": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "subtopic": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 Examination - CS (Set 2, 7th February, Afternoon Session)",
    "confidence": 0.8
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "38",
    "question_text": "Consider the C program below.\n\n#include <stdio.h>\nint *A, stkTop;\n\nint stkFunc(int opcode, int val)\n{\n  static int size=0, stkTop=0;\n  switch (opcode) {\n    case -1: size = val; break;\n    case 0: if (stkTop < size) A[stkTop++] = val; break;\n    default: if (stkTop) return A[--stkTop];\n  }\n  return -1;\n}\n\nint main()\n{\n  int B[20]; A = B; stkTop = -1;\n  stkFunc (-1, 10);\n  stkFunc ( 0, 5);\n  stkFunc ( 0, 10);\n  printf (\"%d\\n\", stkFunc(1, 0) + stkFunc(1, 0));\n}\n\nThe value printed by the above program is __________.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming in C",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 Examination - CS (Set 2, 7th February, Afternoon Session)",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "39",
    "question_text": "Consider the following recursive C function.\nvoid get (int n)\n{\n    if (n<1) return;\n    get(n-1);\n    get(n-3);\n    printf(\"%d\", n);\n}\nIf get(6) function is being called in main() then how many times will the get() function be invoked before returning to the main()?\n(A) 15\n(B) 25\n(C) 35\n(D) 45",
    "subject": "Programming and Data Structures",
    "chapter": "Programming in C. Recursion.",
    "subtopic": "Recursion.",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "48",
    "question_text": "Consider the following C program:\n#include<stdio.h>\nint main( )\n{\n    int i, j, k = 0;\n    j = 2 * 3 / 4 + 2.0 / 5 + 8 / 5;\n    k -= --j;\n    for (i = 0; i < 5; i++)\n    {\n        switch(i + k)\n        {\n            case 1:\n            case 2: printf(\"\\n%d\", i+k);\n            case 3: printf(\"\\n%d\", i+k);\n            default: printf(\"\\n%d\", i+k);\n        }\n    }\n    return 0;\n}\nThe number of times printf statement is executed is __________.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming in C.",
    "subtopic": "Programming in C.",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "54",
    "question_text": "Consider the following C program.\n#include<stdio.h>\nint f1(void);\nint f2(void);\nint f3(void);\nint x = 10;\nint main( )\n{\n    int x = 1;\n    x += f1( ) + f2( ) + f3( ) + f2( );\n    printf(\"%d\", x);\n    return 0;\n}\nint f1() { int x = 25; x++; return x;}\nint f2() { static int x = 50; x++; return x;}\nint f3() { x *= 10; return x;}\nThe output of the program is __________.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming in C.",
    "subtopic": "Programming in C.",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "7",
    "question_text": "Consider the following C program segment.\n#include <stdio.h>\nint main()\n{\n    char s1[7] = \"1234\", *p;\n    p = s1 + 2;\n    *p = '0';\n    printf(\"%s\", s1);\n}\nWhat will be printed by the program?\n(A) 12\n(B) 120400\n(C) 1204\n(D) 1034",
    "subject": "Programming and Data Structures",
    "chapter": "Programming in C.",
    "subtopic": "Programming in C.",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 1",
    "question_text": "Match the following:\n(P) Condition coverage\n(Q) Equivalence class partitioning\n(R) Volume testing\n(S) Alpha testing\n\n(i) Black-box testing\n(ii) System testing\n(iii) White-box testing\n(iv) Performance testing\n\n(A) P-ii, Q-iii, R-i, S-iv\n(B) P-iii, Q-iv, R-ii, S-i\n(C) P-iii, Q-i, R-iv, S-ii\n(D) P-iii, Q-i, R-ii, S-iv",
    "subject": "Programming and Data Structures",
    "chapter": "OTHER: Software Engineering Concepts",
    "subtopic": "OTHER: Software Testing Methodologies",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 0.3
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 10",
    "question_text": "Which of the following is/are correct inorder traversal sequence(s) of binary search tree(s)?\nI. 3, 5, 7, 8, 15, 19, 25\nII. 5, 8, 9, 12, 10, 15, 25\nIII. 2, 7, 10, 8, 14, 16, 20\nIV. 4, 6, 7, 9 18, 20, 25\n\n(A) I and IV only\n(B) II and III only\n(C) II and IV only\n(D) II only",
    "subject": "Programming and Data Structures",
    "chapter": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "subtopic": "binary search trees",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 11",
    "question_text": "The output of the following C program is _______\n\nvoid f1(int a, int b) {\n  int c;\n  c=a; a=b; b=c;\n}\nvoid f2(int *a, int *b) {\n  int c;\n  c=*a; *a=*b; *b=c;\n}\nint main() {\n  int a=4, b=5, c=6;\n  f1(a,b);\n  f2(&b, &c);\n  printf(\"%d\", c-a-b);\n}",
    "subject": "Programming and Data Structures",
    "chapter": "Programming in C",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 25",
    "question_text": "The height of a tree is the length of the longest root-to-leaf path in it. The maximum and minimum number of nodes in a binary tree of height 5 are\n(A) 63 and 6, respectively\n(B) 64 and 5, respectively\n(C) 32 and 6, respectively\n(D) 31 and 5, respectively",
    "subject": "Programming and Data Structures",
    "chapter": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "subtopic": "trees",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 32",
    "question_text": "Consider a max heap, represented by the array: 40, 30, 20, 10, 15, 16, 17, 8, 4.\nNow consider that a value 35 is inserted into this heap. After insertion, the new heap is\n(A) 40, 30, 20, 10, 15, 16, 17, 8, 4, 35\n(B) 40, 35, 20, 10, 30, 16, 17, 8, 4, 15\n(C) 40, 30, 20, 10, 35, 16, 17, 8, 4, 15\n(D) 40, 35, 20, 10, 15, 16, 17, 8, 4, 30",
    "subject": "Programming and Data Structures",
    "chapter": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "subtopic": "binary heaps",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 35",
    "question_text": "What is the output of the following C code? Assume that the address of x is 2000 (in decimal) and an integer requires four bytes of memory.\n\nint main () {\n  unsigned int x[4][3] = {{1,2,3},{4,5,6},{7,8,9},{10,11,12}};\n  printf(\"%u, %u, %u\", x+3, *(x+3), *(x+2)+3);\n}\n\n(A) 2036, 2036, 2036\n(B) 2012, 4, 2204\n(C) 2036, 10, 10\n(D) 2012, 4, 6",
    "subject": "Programming and Data Structures",
    "chapter": "Programming in C",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 42",
    "question_text": "Consider the following C program segment.\nwhile(first <= last)\n{\n  if (array[middle] < search)\n    first = middle + 1;\n  else if (array[middle] == search)\n    found = TRUE;\n  else\n    last = middle - 1;\n  middle = (first + last)/2;\n}\nif (first > last)\n  notPresent = TRUE;\nThe cyclomatic complexity of the program segment is ______",
    "subject": "Programming and Data Structures",
    "chapter": "OTHER: Software Engineering Concepts",
    "subtopic": "OTHER: Code Complexity Metrics",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 0.3
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.10",
    "question_text": "A queue is implemented using an array such that ENQUEUE and DEQUEUE operations are performed efficiently. Which one of the following statements is CORRECT (n refers to the number of items in the queue)?\n(A) Both operations can be performed in O(1) time\n(B) At most one operation can be performed in O(1) time but the worst case time for the other operation will be Ω(n)\n(C) The worst case time complexity for both operations will be Ω(n)\n(D) Worst case time complexity for both operations will be Ω(log n)",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2016 CS Set A",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.11",
    "question_text": "Breadth First Search (BFS) is started on a binary tree beginning from the root vertex. There is a vertex t at a distance four from the root. If t is the n-th vertex in this BFS traversal, then the maximum possible value of n is __________.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "trees",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2016 CS Set-B",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.12",
    "question_text": "The value printed by the following program is __________.\nvoid f(int* p, int m){\nm = m + 5;\n*p = *p + m;\nreturn;\n}\nvoid main(){\nint i=5, j=10;\nf(&i, j);\nprintf(\"%d\", i+j);\n}",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2016 CS Set-B",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.12",
    "question_text": "Consider the following C program.\n\nvoid f(int, short);\nvoid main()\n{\n  int i = 100;\n  short s = 12;\n  short *p = &s;\n  __________; // call to f()\n}\n\nWhich one of the following expressions, when placed in the blank above, will NOT result in a type checking error?\n(A) f(s, *s)\n(B) i = f(i, s)\n(C) f(i, *s)\n(D) f(i, *p)",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2016 CS Set A",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.15",
    "question_text": "Consider the following C program.\n\n#include<stdio.h>\nvoid mystery(int *ptra, int *ptrb) {\n  int *temp;\n  temp = ptrb;\n  ptrb = ptra;\n  ptra = temp;\n}\nint main() {\n  int a=2016, b=0, c=4, d=42;\n  mystery(&a, &b);\n  if (a < c)\n    mystery(&c, &a);\n  mystery(&a, &d);\n  printf(\"%d\\n\", a);\n}\n\nThe output of the program is __________.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2016 CS Set A",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.34",
    "question_text": "A complete binary min-heap is made by including each integer in [1, 1023] exactly once. The depth of a node in the heap is the length of the path from the root of the heap to that node. Thus, the root is at depth 0. The maximum depth at which integer 9 can appear is __________.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "binary heaps",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2016 CS Set-B",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.34",
    "question_text": "The following function computes the maximum value contained in an integer array p[] of size n (n >= 1).\nint max(int *p, int n) {\n  int a=0, b=n-1;\n  while (__________ ) {\n    if (p[a] <= p[b]) { a = a+1; }\n    else              { b = b-1; }\n  }\n  return p[a];\n}\nThe missing loop condition is\n(A) a != n\n(B) b != 0\n(C) b > (a + 1)\n(D) b != a",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2016 CS Set A",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.35",
    "question_text": "What will be the output of the following C program?\nvoid count(int n){\n  static int d=1;\n  printf(\"%d \", n);\n  printf(\"%d \", d);\n  d++;\n  if(n>1) count(n-1);\n  printf(\"%d \", d);\n}\nvoid main(){\n  count(3);\n}\n(A) 3 1 2 2 1 3 4 4 4\n(B) 3 1 2 1 1 1 2 2 2\n(C) 3 1 2 2 1 3 4\n(D) 3 1 2 1 1 1 2",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2016 CS Set A",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.36",
    "question_text": "Consider the following New-order strategy for traversing a binary tree:\n• Visit the root;\n• Visit the right subtree using New-order;\n• Visit the left subtree using New-order;\nThe New-order traversal of the expression tree corresponding to the reverse polish expression 3 4 * 5 – 2 ^ 6 7 * 1 + – is given by:\n(A) + – 1 * 6 7 ^ 2 – 5 * 3 4\n(B) – + 1 * 6 7 ^ 2 – 5 * 3 4\n(C) – + 1 * 7 6 ^ 2 – 5 * 4 3\n(D) 1 7 6 * + 2 5 4 3 * – ^",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "trees",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2016 CS Set-B",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.37",
    "question_text": "Consider the following program:\nint f(int *p, int n)\n{\nif (n <= 1) return 0;\nelse return max(f(p+1,n-1),p[0]-p[1]);\n}\nint main()\n{\nint a[] = {3,5,2,6,4};\nprintf(\"%d\", f(a,5));\n}\nNote: max(x,y) returns the maximum of x and y.\nThe value printed by this program is __________.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Recursion",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2016 CS Set-B",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.40",
    "question_text": "The number of ways in which the numbers 1, 2, 3, 4, 5, 6, 7 can be inserted in an empty binary search tree, such that the resulting tree has height 6, is __________.\nNote: The height of a tree with a single node is 0.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "binary search trees",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2016 CS Set-B",
    "confidence": 1
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "2",
    "question_text": "Match the following:\n(P) static char var;\n(Q) m = malloc(10); m = NULL;\n(R) char *ptr[10];\n(S) register int varl;\nwith\n(i) Sequence of memory locations to store addresses\n(ii) A variable located in data section of memory\n(iii) Request to allocate a CPU register to store data\n(iv) A lost memory which cannot be freed",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2017 Session 2",
    "confidence": 0.9
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "35",
    "question_text": "Consider the following two functions.\nvoid fun1(int n) {\n  if (n == 0) return;\n  printf(\"%d\", n);\n  fun2(n-2);\n  printf(\"%d\", n);\n}\nvoid fun2(int n) {\n  if (n == 0) return;\n  printf(\"%d\", n);\n  fun1(++n);\n  printf(\"%d\", n);\n}\nThe output printed when fun1(5) is called is\n(A) 53423122233445\n(B) 53423120112233\n(C) 53423122132435\n(D) 53423120213243",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Recursion",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2017 CS",
    "confidence": 1
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "36",
    "question_text": "Consider the C functions foo and bar given below:\nint foo(int val) {\n  int x = 0;\n  while (val > 0) {\n    x = x + foo(val--);\n  }\n  return val;\n}\nint bar(int val) {\n  int x = 0;\n  while (val > 0) {\n    x = x + bar(val-1);\n  }\n  return val;\n}\nInvocations of foo(3) and bar(3) will result in:\n(A) Return of 6 and 6 respectively.\n(B) Infinite loop and abnormal termination respectively.\n(C) Abnormal termination and infinite loop respectively.\n(D) Both terminating abnormally.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Recursion",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2017 CS",
    "confidence": 1
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "53",
    "question_text": "Consider the following C program.\n#include <stdio.h>\n#include <string.h>\nvoid printlength(char *s, char *t) {\n  unsigned int c = 0;\n  int len = ((strlen(s) - strlen(t)) > c) ? strlen(s): strlen(t);\n  printf(\"%d\\n\", len);\n}\nvoid main() {\n  char *x = \"abc\";\n  char *y = \"defgh\";\n  printlength(x,y);\n}\nRecall that strlen is defined in string.h as returning a value of type size_t, which is an unsigned int. The output of the program is ______.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2017 CS",
    "confidence": 0.9
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "55",
    "question_text": "The output of executing the following C program is ______.\n#include <stdio.h>\nint total(int v) {\n  static int count = 0;\n  while(v) {\n    count += v&1;\n    v >>= 1;\n  }\n  return count;\n}\nvoid main(){\n  static int x = 0;\n  int i = 5;\n  for(; i > 0; i--) {\n    x = x + total(i);\n  }\n  printf(\"%d\\n\", x);\n}",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2017 CS",
    "confidence": 1
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "6",
    "question_text": "Let T be a binary search tree with 15 nodes. The minimum and maximum possible heights of T are:\nNote: The height of a tree with a single node is 0.\n(A) 4 and 15 respectively\n(B) 3 and 14 respectively\n(C) 4 and 14 respectively\n(D) 3 and 15 respectively",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "trees, binary search trees",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2017 CS",
    "confidence": 1
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "8",
    "question_text": "Consider the C code fragment given below.\ntypedef struct node {\n  int data;\n  node* next;\n} node;\nvoid join(node* m, node* n) {\n  node* p = n;\n  while (p->next != NULL) {\n    p = p->next;\n  }\n  p->next = m;\n}\nAssuming that m and n point to valid NULL-terminated linked lists, invocation of join will\n(A) append list m to the end of list n for all inputs.\n(B) either cause a null pointer dereference or append list m to the end of list n.\n(C) cause a null pointer dereference for all inputs.\n(D) append list n to the end of list m for all inputs.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "linked lists",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2017 CS",
    "confidence": 1
  },
  {
    "year": 2018,
    "paper_code": "CS",
    "question_no": "2",
    "question_text": "Consider the following C program.\n#include<stdio.h>\nstruct Ournode{\n    char x,y,z;\n};\nint main(){\n    struct Ournode p = {'1', '0', 'a'+2};\n    struct Ournode *q = &p;\n    printf (\"%c, %c\", *((char*)q+1), *((char*)q+2));\n    return 0;\n}\nThe output of this program is:",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2018",
    "confidence": 1
  },
  {
    "year": 2018,
    "paper_code": "CS",
    "question_no": "20",
    "question_text": "The postorder traversal of a binary tree is 8,9,6,7,4,5,2,3,1. The inorder traversal of the same tree is 8,6,9,4,7,2,5,1,3. The height of a tree is the length of the longest path from the root to any leaf. The height of the binary tree above is ____.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "trees",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2018",
    "confidence": 1
  },
  {
    "year": 2018,
    "paper_code": "CS",
    "question_no": "21",
    "question_text": "Consider the following C program:\n#include <stdio.h>\nint counter = 0;\nint calc (int a, int b) {\n    int c;\n    counter++;\n    if (b==3) return (a*a*a);\n    else {\n        c = calc(a, b/3);\n        return (c*c*c);\n    }\n}\nint main (){\n    calc(4, 81);\n    printf (\"%d\", counter);\n}\nThe output of this program is ____.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Recursion",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2018",
    "confidence": 1
  },
  {
    "year": 2018,
    "paper_code": "CS",
    "question_no": "29",
    "question_text": "Consider the following C program:\n#include<stdio.h>\nvoid fun1(char *s1, char *s2){\n    char *tmp;\n    tmp = s1;\n    s1 = s2;\n    s2 = tmp;\n}\nvoid fun2(char **s1, char **s2){\n    char *tmp;\n    tmp = *s1;\n    *s1 = *s2;\n    *s2 = tmp;\n}\nint main(){\n    char *str1 = \"Hi\", *str2 = \"Bye\";\n    fun1(str1, str2); printf(\"%s %s \", str1, str2);\n    fun2(&str1, &str2); printf(\"%s %s\", str1, str2);\n    return 0;\n}\nThe output of the program above is",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2018",
    "confidence": 1
  },
  {
    "year": 2018,
    "paper_code": "CS",
    "question_no": "3",
    "question_text": "A queue is implemented using a non-circular singly linked list. The queue has a head pointer and a tail pointer, as shown in the figure. Let n denote the number of nodes in the queue. Let enqueue be implemented by inserting a new node at the head, and dequeue be implemented by deletion of a node from the tail.\nWhich one of the following is the time complexity of the most time-efficient implementation of enqueue and dequeue, respectively, for this data structure?",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "linked lists",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2018",
    "confidence": 1
  },
  {
    "year": 2018,
    "paper_code": "CS",
    "question_no": "32",
    "question_text": "Consider the following C code. Assume that unsigned long int type length is 64 bits.\nunsigned long int fun(unsigned long int n){\n    unsigned long int i, j = 0, sum = 0;\n    for (i = n; i > 1; i = i/2) j++;\n    for ( ; j > 1; j = j/2) sum++;\n    return(sum);\n}\nThe value returned when we call fun with the input 2⁴⁰ is",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2018",
    "confidence": 0.9
  },
  {
    "year": 2018,
    "paper_code": "CS",
    "question_no": "45",
    "question_text": "Consider the following program written in pseudo-code. Assume that x and y are integers.\nCount(x,y) {\n    if (y != 1){\n        if (x != 1) {\n            print(\"*\");\n            Count(x/2, y);\n        }\n        else {\n            y = y-1;\n            Count(1024, y);\n        }\n    }\n}\nThe number of times that the print statement is executed by the call Count(1024,1024) is ____.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Recursion",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2018",
    "confidence": 1
  },
  {
    "year": 2018,
    "paper_code": "CS",
    "question_no": "46",
    "question_text": "The number of possible min-heaps containing each value from {1, 2, 3, 4, 5, 6, 7} exactly once is ____.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "binary heaps",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2018",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "16",
    "question_text": "What is the worst case time complexity of inserting n elements into an empty linked list, if the linked list needs to be maintained in sorted order?",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "linked lists",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "22",
    "question_text": "Consider the following C program.\n#include <stdio.h>\nint main() {\nint a[4] [5]={{1, 2, 3, 4, 5},\n{6, 7, 8, 9, 10},\n{11, 12, 13, 14, 15},\n{16, 17, 18, 19, 20}};\nprintf(\"%d\\n\", *(*(a+**a+2)+3));\nreturn(0);\n}\nThe output of the program is _____",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "41",
    "question_text": "In a balanced binary search tree with n elements, what is the worst case time complexity of reporting all elements in range [a, b]? Assume that the number of reported elements is k.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "binary search trees",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "46",
    "question_text": "Consider the following C functions.\nint fun1(int n) {\n    static int i = 0;\n    if (n > 0) {\n        ++i;\n        fun1(n-1);\n    }\n    return(i);\n}\nint fun2(int n) {\n    static int i = 0;\n    if (n > 0) {\n        i = i + fun1(n);\n        fun2(n-1);\n    }\n    return(i);\n}\nThe return value of fun2(5) is _____",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "47",
    "question_text": "Consider the array representation of a binary min-heap containing 1023 elements. The minimum number of comparisons required to find the maximum in the heap is _____",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "binary heaps",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "48",
    "question_text": "Consider the following C functions.\nint tob(int b, int* arr) {\n    int i;\n    for(i=0; b>0; i++) {\n        if (b%2) arr[i]=1;\n        else arr[i]=0;\n        b = b/2;\n    }\n    return(i);\n}\nint pp(int a, int b) {\n    int arr[20];\n    int i, tot = 1, ex, len;\n    ex = a;\n    len = tob(b,arr);\n    for(i=0; i<len; i++) {\n        if(arr[i]==1)\n            tot = tot * ex;\n        ex = ex * ex;\n    }\n    return(tot);\n}\nThe value returned by pp(3,4) is _____",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "5",
    "question_text": "The preorder traversal of a binary search tree is 15, 10, 12, 11, 20, 18, 16, 19.\nWhich one of the following is the postorder traversal of the tree?",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "binary search trees",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "6",
    "question_text": "What is the worst case time complexity of inserting n² elements into an AVL-tree with n elements initially?",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "binary search trees",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2020 CS",
    "confidence": 0.9
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS Q.10",
    "question_text": "Consider the following ANSI C program.\n\n#include <stdio.h>\nint main() {\n  int arr[4][5];\n  int i, j;\n  for (i=0; i<4; i++){\n    for (j=0; j<5; j++){\n      arr[i][j] = 10*i + j;\n    }\n  }\n  printf(\"%d\", *(arr[1] + 9));\n  return 0;\n}\n\nWhat is the output of the above program?\n\n(A) 14\n(B) 20\n(C) 24\n(D) 30",
    "subject": "Section 4: Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2021 CS Set-2",
    "confidence": 1.0
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS Q.2",
    "question_text": "Let H be a binary min-heap consisting of n elements implemented as an array. What is the worst case time complexity of an optimal algorithm to find the maximum element in H?\n\n(A) Θ(1)\n(B) Θ(log n)\n(C) Θ(n)\n(D) Θ(n log n)",
    "subject": "Section 4: Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "binary heaps",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2021 CS Set-2",
    "confidence": 1.0
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS Q.23",
    "question_text": "Consider the following ANSI C function:\n\nint SomeFunction(int x, int y)\n{\n  if ((x == 1) || (y == 1)) return 1;\n  if (x == y) return x;\n  if (x > y) return SomeFunction(x - y, y);\n  if (y > x) return SomeFunction(x, y - x);\n}\n\nThe value returned by SomeFunction(15, 255) is ____________.",
    "subject": "Section 4: Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Recursion",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2021 CS Set-2",
    "confidence": 1.0
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS Q.35",
    "question_text": "Consider the following ANSI C program:\n\n#include <stdio.h>\n#include <stdlib.h>\nstruct Node{\n  int value;\n  struct Node *next;};\nint main() {\n  struct Node *boxE, *head, *boxN; int index = 0;\n  boxE = head = (struct Node *) malloc(sizeof(struct Node));\n  head->value = index;\n  for (index = 1; index <= 3; index++) {\n    boxN = (struct Node *) malloc(sizeof(struct Node));\n    boxE->next = boxN;\n    boxN->value = index;\n    boxE = boxN; }\n  for (index = 0; index <= 3; index++) {\n    printf(\"Value at index %d is %d\\n\", index, head->value);\n    head = head->next;\n    // printf(\"Value at index %d is %d\\n\", index+1, head->value); \n  } \n}\n\nWhich one of the statements below is correct about the program?\n\n(A) Upon execution, the program creates a linked-list of five nodes.\n(B) Upon execution, the program goes into an infinite loop.\n(C) It has a missing return which will be reported as an error by the compiler.\n(D) It dereferences an uninitialized pointer that may result in a run-time error.",
    "subject": "Section 4: Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "linked lists",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2021 CS Set-2",
    "confidence": 1.0
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS Q.49",
    "question_text": "Consider the following ANSI C program.\n\n#include <stdio.h>\nint foo(int x, int y, int q)\n{\n  if ((x <= 0) && (y <= 0))\n    return q;\n  if (x <= 0)\n    return foo(x, y-q, q);\n  if (y <= 0)\n    return foo(x-q, y, q);\n  return foo(x, y-q, q) + foo(x-q, y, q);\n}\n\nint main()\n{\n  int r = foo(15,15,10);\n  printf(\"%d\", r);\n  return 0;\n}\n\nThe output of the program upon execution is ____________.",
    "subject": "Section 4: Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Recursion",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2021 CS Set-2",
    "confidence": 1.0
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS-Q.10",
    "question_text": "A binary search tree T contains n distinct elements. What is the time complexity of picking an element in T that is smaller than the maximum element in T?\n\n(A) Θ(n log n)\n(B) Θ(n)\n(C) Θ(log n)\n(D) Θ(1)",
    "subject": "Programming and Data Structures",
    "chapter": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "subtopic": "binary search trees",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2021 CS Set-1",
    "confidence": 1
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS-Q.4",
    "question_text": "Consider the following statements.\n\nS₁: The sequence of procedure calls corresponds to a preorder traversal of the activation tree.\nS₂: The sequence of procedure returns corresponds to a postorder traversal of the activation tree.\n\nWhich one of the following options is correct?\n\n(A) S₁ is true and S₂ is false\n(B) S₁ is false and S₂ is true\n(C) S₁ is true and S₂ is true\n(D) S₁ is false and S₂ is false",
    "subject": "Programming and Data Structures",
    "chapter": "Recursion",
    "subtopic": "Recursion",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2021 CS Set-1",
    "confidence": 1
  },
  {
    "year": 2022,
    "paper_code": "CS",
    "question_no": "Q.15",
    "question_text": "Consider the problem of reversing a singly linked list. To take an example, given the linked list below,\nhead -> a -> b -> c -> d -> e\nthe reversed linked list should look like\nhead -> e -> d -> c -> b -> a\nWhich one of the following statements is TRUE about the time complexity of algorithms that solve the above problem in O(1) space?\n\n(A) The best algorithm for the problem takes O(n) time in the worst case.\n(B) The best algorithm for the problem takes O(n log n) time in the worst case.\n(C) The best algorithm for the problem takes O(n²) time in the worst case.\n(D) It is not possible to reverse a singly linked list in O(1) space.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "linked lists",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2022 CS",
    "confidence": 1
  },
  {
    "year": 2022,
    "paper_code": "CS",
    "question_no": "Q.21",
    "question_text": "What is printed by the following ANSI C program?\n\n#include<stdio.h>\n\nint main(int argc, char *argv[])\n{\n  int x = 1, z[2] = {10, 11};\n  int *p = NULL;\n  p = &x;\n  *p = 10;\n  p = &z[1];\n  *(&z[0] + 1) += 3;\n  printf(\"%d, %d, %d\\n\", x, z[0], z[1]);\n  return 0;\n}",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2022 CS",
    "confidence": 1
  },
  {
    "year": 2022,
    "paper_code": "CS",
    "question_no": "Q.28",
    "question_text": "Suppose a binary search tree with 1000 distinct elements is also a complete binary tree. The tree is stored using the array representation of binary heap trees. Assuming that the array indices start with 0, the 3rd largest element of the tree is stored at index ___.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "binary search trees",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2022 CS",
    "confidence": 1
  },
  {
    "year": 2022,
    "paper_code": "CS",
    "question_no": "Q.43",
    "question_text": "What is printed by the following ANSI C program?\n\n#include<stdio.h>\n\nint main(int argc, char *argv[])\n{\n  int a[3][3][3] =\n    {{1, 2, 3, 4, 5, 6, 7, 8, 9},\n     {10, 11, 12, 13, 14, 15, 16, 17, 18},\n     {19, 20, 21, 22, 23, 24, 25, 26, 27}};\n  int i = 0, j = 0, k = 0;\n  for( i = 0; i < 3; i++ ) {\n    for(k = 0; k < 3; k++ )\n      printf(\"%d \", a[i][j][k]);\n    printf(\"\\n\");\n  }\n  return 0;\n}",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2022 CS",
    "confidence": 1
  },
  {
    "year": 2022,
    "paper_code": "CS",
    "question_no": "Q.44",
    "question_text": "What is printed by the following ANSI C program?\n\n#include<stdio.h>\n\nint main(int argc, char *argv[]){\n  char a = 'P';\n  char b = 'x';\n  char c = (a & b) + '*';\n  char d = (a | b) - '-';\n  char e = (a ^ b) + '+';\n  printf(\"%c %c %c\\n\", c, d, e);\n  return 0;\n}\n\nASCII encoding for relevant characters is given below",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2022 CS",
    "confidence": 1
  },
  {
    "year": 2022,
    "paper_code": "CS",
    "question_no": "Q.62",
    "question_text": "Consider the queues Q₁ containing four elements and Q₂ containing none (shown as the Initial State in the figure). The only operations allowed on these two queues are Enqueue(Q,element) and Dequeue(Q). The minimum number of Enqueue operations on Q₁ required to place the elements of Q₁ in Q₂ in reverse order (shown as the Final State in the figure) without using any additional storage is ___.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "queues",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2022 CS",
    "confidence": 1
  },
  {
    "year": 2023,
    "paper_code": "CS",
    "question_no": "Q.12",
    "question_text": "Which one of the following sequences when stored in an array at locations A[1],..., A[10] forms a max-heap?",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE-2023-CS-Paper",
    "confidence": 1
  },
  {
    "year": 2023,
    "paper_code": "CS",
    "question_no": "Q.13",
    "question_text": "Let SLLdel be a function that deletes a node in a singly-linked list given a pointer to the node and a pointer to the head of the list. Similarly, let DLLdel be another function that deletes a node in a doubly-linked list given a pointer to the node and a pointer to the head of the list. Let n denote the number of nodes in each of the linked lists. Which one of the following choices is TRUE about the worst-case time complexity of SLLdel and DLLdel?",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE-2023-CS-Paper",
    "confidence": 1
  },
  {
    "year": 2023,
    "paper_code": "CS",
    "question_no": "Q.35",
    "question_text": "The integer value printed by the ANSI-C program given below is _______.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE-2023-CS-Paper",
    "confidence": 1
  },
  {
    "year": 2023,
    "paper_code": "CS",
    "question_no": "Q.47",
    "question_text": "Consider the C function foo and the binary tree shown. When foo is called with a pointer to the root node of the given binary tree, what will it print?",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Recursion",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE-2023-CS-Paper",
    "confidence": 1
  },
  {
    "year": 2023,
    "paper_code": "CS",
    "question_no": "Q.59",
    "question_text": "Consider a sequence a of elements a0 = 1, a1 = 5, a2 = 7, a3 = 8, a4 = 9, and a5 = 2. The following operations are performed on a stack S and a queue Q, both of which are initially empty. [List of operations I to X]. The top element of S after executing the above operations is _______.",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE-2023-CS-Paper",
    "confidence": 1
  },
  {
    "year": 2024,
    "paper_code": "Computer Science and Information Technology Set 2 (CS2)",
    "question_no": "Q.13",
    "question_text": "Consider the following C program. Assume parameters to a function are evaluated from right to left.\n\n#include <stdio.h>\nint g(int p) { printf(\"%d\", p); return p; }\nint h(int q) { printf(\"%d\", q); return q; }\nvoid f(int x, int y) {\n  g(x);\n  h(y);\n}\nint main() {\n  f(g(10),h(20));\n}\n\nWhich one of the following options is the CORRECT output of the above C program?",
    "subject": "Programming and Data Structures",
    "chapter": "Programming in C.",
    "subtopic": "Programming in C.",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE2024_CS2_IISc",
    "confidence": 1
  },
  {
    "year": 2024,
    "paper_code": "Computer Science and Information Technology Set 2 (CS2)",
    "question_no": "Q.33",
    "question_text": "Consider the following C function definition.\n\nint fX(char *a){\n char *b = a;\n while(*b)\n  b++;\n return b - a;\n}\nWhich of the following statements is/are TRUE?\n\n(A) The function call fX(\"abcd”) will always return a value\n(B) Assuming a character array c is declared as char c[] = \"abcd” in main(), the function call fX (c) will always return a value\n(C) The code of the function will not compile\n(D) Assuming a character pointer c is declared as char *c = \"abcd” in main(), the function call fX (c) will always return a value",
    "subject": "Programming and Data Structures",
    "chapter": "Programming in C.",
    "subtopic": "Programming in C.",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE2024_CS2_IISc",
    "confidence": 1
  },
  {
    "year": 2024,
    "paper_code": "Computer Science and Information Technology Set 2 (CS2)",
    "question_no": "Q.36",
    "question_text": "What is the output of the following C program?\n#include <stdio.h>\nint main() {\n  double a[2]={20.0, 25.0}, *p, *q;\n  p = a;\n  q = p + 1;\n  printf(\"%d,%d”, (int)(q - p), (int)(*q - *p));\n  return 0;\n}\n\n(A) 4, 8\n(B) 1, 5\n(C) 8, 5\n(D) 1, 8",
    "subject": "Programming and Data Structures",
    "chapter": "Programming in C.",
    "subtopic": "Programming in C.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2024_CS2_IISc",
    "confidence": 1
  },
  {
    "year": 2024,
    "paper_code": "Computer Science and Information Technology Set 2 (CS2)",
    "question_no": "Q.39",
    "question_text": "You are given a set V of distinct integers. A binary search tree T is created by inserting all elements of V one by one, starting with an empty tree. The tree T follows the convention that, at each node, all values stored in the left subtree of the node are smaller than the value stored at the node. You are not aware of the sequence in which these values were inserted into T, and you do not have access to T. Which one of the following statements is TRUE?\n\n(A) Inorder traversal of T can be determined from V\n(B) Root node of T can be determined from V\n(C) Preorder traversal of T can be determined from V\n(D) Postorder traversal of T can be determined from V",
    "subject": "Programming and Data Structures",
    "chapter": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs.",
    "subtopic": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs.",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE2024_CS2_IISc",
    "confidence": 1
  },
  {
    "year": 2024,
    "paper_code": "Computer Science and Information Technology Set 2 (CS2)",
    "question_no": "Q.48",
    "question_text": "Let S1 and S2 be two stacks. S1 has capacity of 4 elements. S2 has capacity of 2 elements. S1 already has 4 elements: 100, 200, 300, and 400, whereas S2 is empty, as shown below. Only the following three operations are available: PushToS2, PushToS1, GenerateOutput. Note that the pop operation is not allowed on an empty stack and the push operation is not allowed on a full stack. Which of the following output sequences can be generated by using the above operations?",
    "subject": "Programming and Data Structures",
    "chapter": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs.",
    "subtopic": "Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2024_CS2_IISc",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS1",
    "question_no": "Q.26",
    "question_text": "Which of the following statement(s) is/are TRUE for any binary search tree (BST) having n distinct integers?",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "trees, binary search trees, binary heaps, graphs",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2025 CS1 Paper",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS1",
    "question_no": "Q.34",
    "question_text": "#include <stdio.h>\nvoid foo(int *p, int x){\n  *p=x;\n}\nint main(){\n  int *z;\n  int a = 20, b = 25;\n  z = &a;\n  foo(z,b);\n  printf(\"%d\",a);\n  return 0;\n}\nThe output of the given C program is ______. (Answer in integer)",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2025 CS1 Paper",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS1",
    "question_no": "Q.35",
    "question_text": "The height of any rooted tree is defined as the maximum number of edges in the path from the root node to any leaf node. Suppose a Min-Heap T stores 32 keys. The height of T is ______. (Answer in integer)",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "trees, binary search trees, binary heaps, graphs",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2025 CS1 Paper",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS1",
    "question_no": "Q.61",
    "question_text": "#include <stdio.h>\nint foo(int S[],int size) {\n  if(size == 0) return 0;\n  if(size == 1) return 1;\n  if(S[0] != S[1]) return 1+foo(S+1,size-1);\n  return foo(S+1,size-1);\n}\nint main(){\n  int A[]={0,1,2,2,2,0,0,1,1};\n  printf(\"%d\",foo(A,9));\n  return 0;\n}\nThe value printed by the given C program is ______. (Answer in integer)",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Recursion",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2025 CS1 Paper",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS1",
    "question_no": "Q.62",
    "question_text": "Let LIST be a datatype for an implementation of linked list defined as follows: typedef struct list { int data; struct list *next; } LIST; Suppose a program has created two linked lists, L1 and L2, whose contents are given in the figure below. L1 contains 9 nodes, and L2 contains 7 nodes. Consider the following C program segment that modifies the list L1. The number of nodes that will be there in L1 after the execution of the code segment is ______. (Answer in integer)",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "linked lists",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2025 CS1 Paper",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS1",
    "question_no": "Q.63",
    "question_text": "Consider the following C program:\n#include <stdio.h>\nint gate (int n) {\n  int d, t, newnum, turn;\n  newnum = turn = 0; t=1;\n  while (n>=t) t *= 10;\n  t /=10;\n  while (t>0) {\n    d = n/t;\n    n = n%t;\n    t /= 10;\n    if (turn) newnum = 10*newnum + d;\n    turn = (turn + 1) % 2;\n  }\n  return newnum;\n}\nint main () {\n  printf (\"%d\", gate(14362));\n  return 0;\n}\nThe value printed by the given C program is ______. (Answer in integer)",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2025 CS1 Paper",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS2",
    "question_no": "Q.13",
    "question_text": "Consider a binary tree T in which every node has either zero or two children. Let n > 0 be the number of nodes in T.\n\nWhich ONE of the following is the number of nodes in T that have exactly two children?",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "trees",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2025 Mock",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS2",
    "question_no": "Q.19",
    "question_text": "Consider the following C program:\n\n#include <stdio.h>\n\nvoid stringcopy(char *, char *);\n\nint main(){\n  char a[30] = \"@#Hello World!\";\n  stringcopy(a, a + 2);\n  printf(\"%s\\n\", a);\n  return 0;\n}\n\nvoid stringcopy(char *s, char *t) {\n  while(*t)\n    *s++ = *t++;\n}\n\nWhich ONE of the following will be the output of the program?",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2025 Mock",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS2",
    "question_no": "Q.33",
    "question_text": "int x=126,y=105;\ndo {\n  if(x>y) x=x-y;\n  else y=y-x;\n} while(x!=y);\nprintf(\"%d\",x);\n\nThe output of the given C code segment is __________.\n(Answer in integer)",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2025 Mock",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS2",
    "question_no": "Q.35",
    "question_text": "Suppose the values 10, -4, 15, 30, 20, 5, 60, 19 are inserted in that order into an initially empty binary search tree. Let T be the resulting binary search tree. The number of edges in the path from the node containing 19 to the root node of T is __________.\n(Answer in integer)",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "binary search trees",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2025 Mock",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS2",
    "question_no": "Q.45",
    "question_text": "Consider a stack data structure into which we can PUSH and POP records. Assume that each record pushed in the stack has a positive integer key and that all keys are distinct. We wish to augment the stack data structure with an O(1) time MIN operation that returns a pointer to the record with smallest key present in the stack\n1) without deleting the corresponding record, and\n2) without increasing the complexities of the standard stack operations.\nWhich one or more of the following approach(es) can achieve it?",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "stacks",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2025 Mock",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS2",
    "question_no": "Q.62",
    "question_text": "Consider the following C program:\n\n#include <stdio.h>\n\nint main(){\n  int a;\n  int arr[5] = {30,50,10};\n  int *ptr;\n  ptr = &arr[0] + 1;\n  a = *ptr;\n  (*ptr)++;\n  ptr++;\n  printf(\"%d\", a + (*ptr) + arr[1]);\n  return 0;\n}\n\nThe output of the above program is __________.\n(Answer in integer)",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2025 Mock",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS2",
    "question_no": "Q.63",
    "question_text": "Consider the following C program:\n\n#include <stdio.h>\n\nint g(int n) {\n  return (n+10);\n}\n\nint f(int n) {\n  return g(n*2);\n}\n\nint main() {\n  int sum, n;\n  sum=0;\n  for (n=1; n<3; n++)\n    sum += g(f(n));\n  printf (\"%d\", sum);\n  return 0;\n}\n\nThe output of the given C program is __________.\n(Answer in integer)",
    "subject": "Programming and Data Structures",
    "chapter": "Programming and Data Structures",
    "subtopic": "Programming in C",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2025 Mock",
    "confidence": 1
  }
]