[
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.11",
    "question_text": "What is the number of swaps required to sort n elements using selection sort, in the worst case ?\n(Α) Θ(n)\n(B) O(n log n)\n(C) Θ(n²)\n(D) O(n² log n)",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Searching, sorting, hashing.",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.13",
    "question_text": "Which of the following statement(s) is/are correct regarding Bellman-Ford shortest path algorithm ?\nP. Always finds a negative weighted cycle, if one exists.\nQ. Finds whether any negative weighted cycle is reachable from the source.\n(A) P only\n(B) Q only\n(C) both P and Q\n(D) neither P nor Q",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Graph traversals, minimum spanning trees, shortest paths.",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.19",
    "question_text": "The coupling between different modules of a software is categorized as follows:\nI. Content coupling\nII. Common coupling\nIII. Control coupling\nIV. Stamp coupling\nV. Data coupling\nCoupling between modules can be ranked in the order of strongest (least desirable) to weakest (most desirable) as follows :\n(A) I – II – III – IV – V\n(B) V – IV – III – II – I\n(C) I – III – V – II – IV\n(D) IV – II – V – III – I",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "OTHER: Software Engineering Concepts",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2009 CS",
    "confidence": 0.3
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.35",
    "question_text": "The running time of an algorithm is represented by the following recurrence relation:\nT(n) = n if n <= 3\nT(n) = T(n/3) + cn otherwise\nWhich one of the following represents the time complexity of the algorithm?\n(A) Θ(n)\n(B) Θ(n log n)\n(C) Θ(n²)\n(D) Θ(n² log n)",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.36",
    "question_text": "The keys 12, 18, 13, 2, 3, 23, 5 and 15 are inserted into an initially empty hash table of length 10 using open addressing with hash function h(k) = k mod 10 and linear probing. What is the resultant hash table?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Searching, sorting, hashing.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.38",
    "question_text": "Consider the following graph :\n(graph image provided)\nWhich one of the following is NOT the sequence of edges added to the minimum spanning tree using Kruskal's algorithm?\n(A) (b, e) (e, f) (a, c) (b, c) (f, g) (c, d)\n(B) (b, e) (e, f) (a, c) (f, g) (b, c) (c, d)\n(C) (b, e) (a, c) (e, f) (b, c) (f, g) (c, d)\n(D) (b, e) (e, f) (b, c) (a, c) (f, g) (c, d)",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Graph traversals, minimum spanning trees, shortest paths.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.39",
    "question_text": "In quick sort, for sorting n elements, the (n/4)th smallest element is selected as pivot using an O(n) time algorithm. What is the worst case time complexity of the quick sort ?\n(Α) Θ(n)\n(B) O(n log n)\n(C) Θ(n²)\n(D) O(n² log n)",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity.",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.49",
    "question_text": "Which of the following statements are TRUE?\nI. The context diagram should depict the system as a single bubble.\nII. External entities should be identified clearly at all levels of DFDs.\nIII. Control information should not be represented in a DFD.\nIV. A data store can be connected either to another data store or to an external entity.\n(A) II and III\n(B) I, II and IV\n(C) I and III\n(D) I, II and III",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "OTHER: Software Engineering / DFDs",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 0.3
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.50",
    "question_text": "Consider the following statements about the cyclomatic complexity of the control flow graph of a program module. Which of these are TRUE ?\nI. The cyclomatic complexity of a module is equal to the maximum number of linearly independent circuits in the graph.\nII. The cyclomatic complexity of a module is the number of decisions in the module plus one, where a decision is effectively any conditional statement in the module.\nIII. The cyclomatic complexity can also be used as a number of linearly independent paths that should be tested during path coverage testing.\n(A) I and II\n(B) II and III\n(C) I and III\n(D) I, II and III",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "OTHER: Software Engineering / Testing",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 0.3
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.53",
    "question_text": "We wish to find the length of the longest common sub-sequence (LCS) of X[m] and Y[n] as l(m, n), where an incomplete recursive definition for the function l(i, j) to compute the length of the LCS of X[m] and Y[n] is given below :\nl(i,j) = 0 , if either i=0 or j=0\n= expr1 , if i,j>0 and X[i-1]=Y[j-1]\n= expr2 , if i,j>0 and X[i-1]≠Y[j-1]\nWhich one of the following options is correct ?\n(A) expr1 = l(i-1,j)+1\n(B) expr1 = l(i,j-1)\n(C) expr2 = max(l(i-1,j), l(i,j-1))\n(D) expr2 = max(l(i-1,j-1),l(i,j))",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer.",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.54",
    "question_text": "The values of l(i,j) could be obtained by dynamic programming based on the correct recursive definition of l(i,j) of the form given above, using an array L[M,N], where M = m + 1 and N = n + 1, such that L[i,j] = l(i,j).\nWhich one the following statements would be TRUE regarding the dynamic programming solution for the recursive definition of l(i,j)?\n(A) All elements of L should be initialized to 0 for the values of l(i,j) to be properly computed.\n(B) The values of l(i,j) may be computed in a row major order or column major order of L[M,N].\n(C) The values of l(i,j) cannot be computed in either row major order or column major order of L[M,N].\n(D) L[p,q] needs to be computed before L[r,s] if either p<r or q<s.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer.",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2010,
    "paper_code": "CS",
    "question_no": "12",
    "question_text": "Two alternative packages A and B are available for processing a database having 10k records. Package A requires 0.0001n² time units and package B requires 10nlog₁₀n time units to process n records. What is the smallest value of k for which package B will be preferred over A?\n(A) 12\n(B) 10\n(C) 6\n(D) 5",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATEFORUM 2010 CS",
    "confidence": 1
  },
  {
    "year": 2010,
    "paper_code": "CS",
    "question_no": "34",
    "question_text": "The weight of a sequence a₀, a₁, ..., aₙ₋₁ of real numbers is defined as a₀ + a₁/2 + ... + aₙ₋₁/2ⁿ⁻¹. A subsequence of a sequence is obtained by deleting some elements from the sequence, keeping the order of the remaining elements the same. Let X denote the maximum possible weight of a subsequence of a₀, a₁, ..., aₙ₋₁. Then X is equal to\n(A) max(Y, a₀ + Y)\n(B) max(Y, a₀ + Y/2)\n(C) max(Y, a₀ + 2Y)\n(D) a₀ + Y/2\nwhere Y is the maximum weight of a subsequence of a₁, ..., aₙ₋₁.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATEFORUM 2010 CS",
    "confidence": 1
  },
  {
    "year": 2010,
    "paper_code": "CS",
    "question_no": "50",
    "question_text": "Consider a complete undirected graph with vertex set {0, 1, 2, 3, 4}. Entry Wᵢⱼ in the matrix W below is the weight of the edge {i, j}.\nW = [[0, 1, 8, 1, 4], [1, 0, 12, 4, 9], [8, 12, 0, 7, 3], [1, 4, 7, 0, 2], [4, 9, 3, 2, 0]]\nWhat is the minimum possible weight of a spanning tree T in this graph such that vertex 0 is a leaf node in the tree T?\n(A) 7\n(B) 8\n(C) 9\n(D) 10",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Graph traversals, minimum spanning trees, shortest paths",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATEFORUM 2010 CS",
    "confidence": 1
  },
  {
    "year": 2010,
    "paper_code": "CS",
    "question_no": "51",
    "question_text": "Consider a complete undirected graph with vertex set {0, 1, 2, 3, 4}. Entry Wᵢⱼ in the matrix W below is the weight of the edge {i, j}.\nW = [[0, 1, 8, 1, 4], [1, 0, 12, 4, 9], [8, 12, 0, 7, 3], [1, 4, 7, 0, 2], [4, 9, 3, 2, 0]]\nWhat is the minimum possible weight of a path P from vertex 1 to vertex 2 in this graph such that P contains at most 3 edges?\n(A) 7\n(B) 8\n(C) 9\n(D) 10",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Graph traversals, minimum spanning trees, shortest paths",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATEFORUM 2010 CS",
    "confidence": 1
  },
  {
    "year": 2010,
    "paper_code": "CS",
    "question_no": "52",
    "question_text": "A hash table of length 10 uses open addressing with hash function h(k)=k mod 10, and linear probing. After inserting 6 values into an empty hash table, the table is as shown below (indices 2-7 contain 42, 23, 34, 52, 46, 33). Which one of the following choices gives a possible order in which the key values could have been inserted in the table?\n(A) 46, 42, 34, 52, 23, 33\n(B) 34, 42, 23, 52, 33, 46\n(C) 46, 34, 42, 23, 52, 33\n(D) 42, 46, 33, 23, 34, 52",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Searching, sorting, hashing",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATEFORUM 2010 CS",
    "confidence": 1
  },
  {
    "year": 2010,
    "paper_code": "CS",
    "question_no": "53",
    "question_text": "How many different insertion sequences of the key values using the same hash function and linear probing will result in the hash table shown above?\n(A) 10\n(B) 20\n(C) 30\n(D) 40",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Searching, sorting, hashing",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATEFORUM 2010 CS",
    "confidence": 0.9
  },
  {
    "year": 2011,
    "paper_code": "CS",
    "question_no": "Q.10",
    "question_text": "Which one of the following is NOT desired in a good Software Requirement Specifications (SRS) document?\n(A) Functional Requirements\n(B) Non-Functional Requirements\n(C) Goals of Implementation\n(D) Algorithms for Software Implementation",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "OTHER: Software Requirements Specification",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE2011_CS",
    "confidence": 0.3
  },
  {
    "year": 2011,
    "paper_code": "CS",
    "question_no": "Q.25",
    "question_text": "An algorithm to find the length of the longest monotonically increasing sequence of numbers in an array A[0:n-1] is given below.\nLet Lᵢ denote the length of the longest monotonically increasing sequence starting at index i in the array.\nInitialize Lₙ₋₁ = 1.\nFor all i such that 0 ≤ i ≤ n-2\nLᵢ = { 1 + Lᵢ₊₁ if A[i] < A[i+1], 1 Otherwise }\nFinally the length of the longest monotonically increasing sequence is Max (L₀, L₁,..., Lₙ₋₁).\nWhich of the following statements is TRUE?\n(A) The algorithm uses dynamic programming paradigm\n(B) The algorithm has a linear complexity and uses branch and bound paradigm\n(C) The algorithm has a non-linear polynomial complexity and uses branch and bound paradigm\n(D) The algorithm uses divide and conquer paradigm.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE2011_CS",
    "confidence": 0.8
  },
  {
    "year": 2011,
    "paper_code": "CS",
    "question_no": "Q.37",
    "question_text": "Which of the given options provides the increasing order of asymptotic complexity of functions f₁, f₂, f₃ and f₄?\nf₁(n) = 2ⁿ\nf₂(n) = n³/²\nf₃(n) = n log₂n\nf₄(n) = n^(log₂n)\n(A) f₃, f₂, f₄, f₁\n(B) f₃, f₂, f₁, f₄\n(C) f₂, f₃, f₁, f₄\n(D) f₂, f₃, f₄, f₁",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE2011_CS",
    "confidence": 1
  },
  {
    "year": 2011,
    "paper_code": "CS",
    "question_no": "Q.38",
    "question_text": "Four matrices M₁, M₂, M₃ and M₄ of dimensions p×q, q×r, r×s and s×t respectively can be multiplied in several ways with different number of total scalar multiplications. For example when multiplied as ((M₁×M₂)×(M₃×M₄)), the total number of scalar multiplications is pqr + rst + prt. When multiplied as (((M₁×M₂)×M₃)×M₄), the total number of scalar multiplications is pqr + prs + pst.\nIf p=10, q=100, r=20, s=5, and t=80, then the minimum number of scalar multiplications needed is\n(A) 248000\n(B) 44000\n(C) 19000\n(D) 25000",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2011_CS",
    "confidence": 1
  },
  {
    "year": 2011,
    "paper_code": "CS",
    "question_no": "Q.47",
    "question_text": "The following is the comment written for a C function.\n/* This function computes the roots of a quadratic equation\na.x^2 + b.x + c = 0. The function stores two real roots\nin *root1 and *root2 and returns the status of validity\nof roots. It handles four different kinds of cases.\n(i) When coefficient a is zero irrespective of discriminant\n(ii) When discriminant is positive\n(iii) When discriminant is zero\n(iv) When discriminant is negative.\nOnly in case (ii) and (iii), the stored roots are valid.\nOtherwise 0 is stored in the roots. The function returns\n0 when the roots are valid and -1 otherwise.\nThe function also ensures root1 >= root2.\nint get_QuadRoots(float a, float b, float c, float *root1, float *root2);\n*/\nA software test engineer is assigned the job of doing black box testing. He comes up with the following test cases, many of which are redundant.\n| Test Case | Input Set a, b, c | Expected Output Set root1, root2, Return Value |\n| :--- | :--- | :--- |\n| T1 | 0.0, 0.0, 7.0 | 0.0, 0.0, -1 |\n| T2 | 0.0, 1.0, 3.0 | 0.0, 0.0, -1 |\n| T3 | 1.0, 2.0, 1.0 | -1.0, -1.0, 0 |\n| T4 | 4.0, -12.0, 9.0| 1.5, 1.5, 0 |\n| T5 | 1.0, -2.0, -3.0| 3.0, -1.0, 0 |\n| T6 | 1.0, 1.0, 4.0 | 0.0, 0.0, -1 |\nWhich one of the following options provide the set of non-redundant tests using equivalence class partitioning approach from input perspective for black box testing?\n(A) T1, T2, T3, T6\n(B) T1, T3, T4, T5\n(C) T2, T4, T5, T6\n(D) T2, T3, T4, T5",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "OTHER: Software Testing",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2011_CS",
    "confidence": 0.3
  },
  {
    "year": 2011,
    "paper_code": "CS",
    "question_no": "Q.54",
    "question_text": "Statement for Linked Answer Questions 54 and 55:\nAn undirected graph G(V,E) contains n (n > 2) nodes named v₁, v₂, ..., vₙ. Two nodes vᵢ,vⱼ are connected if and only if 0 < |i-j| ≤ 2. Each edge (vᵢ,vⱼ) is assigned a weight i+j. A sample graph with n = 4 is shown below.\nWhat will be the cost of the minimum spanning tree (MST) of such a graph with n nodes?\n(A) 1/2 (11n² - 5n)\n(B) n²-n+1\n(C) 6n-11\n(D) 2n+1",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "minimum spanning trees",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2011_CS",
    "confidence": 1
  },
  {
    "year": 2011,
    "paper_code": "CS",
    "question_no": "Q.55",
    "question_text": "Statement for Linked Answer Questions 54 and 55:\nAn undirected graph G(V,E) contains n (n > 2) nodes named v₁, v₂, ..., vₙ. Two nodes vᵢ,vⱼ are connected if and only if 0 < |i-j| ≤ 2. Each edge (vᵢ,vⱼ) is assigned a weight i+j. A sample graph with n = 4 is shown below.\nThe length of the path from v₅ to v₉ in the MST of previous question with n = 10 is\n(A) 11\n(B) 25\n(C) 31\n(D) 41",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "minimum spanning trees",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2011_CS",
    "confidence": 1
  },
  {
    "year": 2012,
    "paper_code": "CS",
    "question_no": "Q.18",
    "question_text": "Let W(n) and A(n) denote respectively, the worst case and average case running time of an algorithm executed on an input of size n. Which of the following is ALWAYS TRUE?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity.",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2012 Question Paper",
    "confidence": 1
  },
  {
    "year": 2012,
    "paper_code": "CS",
    "question_no": "Q.29",
    "question_text": "Let G be a weighted graph with edge weights greater than one and G' be the graph constructed by squaring the weights of edges in G. Let T and T' be the minimum spanning trees of G and G', respectively, with total weights t and t'. Which of the following statements is TRUE?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Graph traversals, minimum spanning trees, shortest paths.",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2012 Question Paper",
    "confidence": 1
  },
  {
    "year": 2012,
    "paper_code": "CS",
    "question_no": "Q.39",
    "question_text": "A list of n strings, each of length n, is sorted into lexicographic order using the merge-sort algorithm. The worst case running time of this computation is",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2012 Question Paper",
    "confidence": 1
  },
  {
    "year": 2012,
    "paper_code": "CS",
    "question_no": "Q.40",
    "question_text": "Consider the directed graph shown in the figure below. There are multiple shortest paths between vertices S and T. Which one will be reported by Dijkstra's shortest path algorithm? Assume that, in any iteration, the shortest path to a vertex v is updated only when a strictly shorter path to v is discovered.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Graph traversals, minimum spanning trees, shortest paths.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2012 Question Paper",
    "confidence": 1
  },
  {
    "year": 2012,
    "paper_code": "CS",
    "question_no": "Q.5",
    "question_text": "The worst case running time to search for an element in a balanced binary search tree with n2^n elements is",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity.",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2012 Question Paper",
    "confidence": 1
  },
  {
    "year": 2013,
    "paper_code": "CS",
    "question_no": "Q.19",
    "question_text": "What is the time complexity of Bellman-Ford single-source shortest path algorithm on a complete graph of n vertices?\n(A) Θ(n²)\n(B) Θ(n²log n)\n(C) Θ(n³)\n(D) Θ(n³log n)",
    "subject": "Algorithms",
    "chapter": "Graph traversals, minimum spanning trees, shortest paths.",
    "subtopic": "Graph traversals, minimum spanning trees, shortest paths.",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2013 Paper",
    "confidence": 1
  },
  {
    "year": 2013,
    "paper_code": "CS",
    "question_no": "Q.6",
    "question_text": "Which one of the following is the tightest upper bound that represents the number of swaps required to sort n numbers using selection sort?\n(A) O(log n)\n(B) O(n)\n(C) O(n log n)\n(D) O(n²)",
    "subject": "Algorithms",
    "chapter": "Searching, sorting, hashing.",
    "subtopic": "Searching, sorting, hashing.",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2013 Paper",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS",
    "question_no": "11",
    "question_text": "Let G be a graph with n vertices and m edges. What is the tightest upper bound on the running time of Depth First Search on G, when G is represented as an adjacency matrix?\n(A) Θ(n)\n(B) Θ(n + m)\n(C) Θ(n²)\n(D) Θ(m²)",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE2014_CS_OCR",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS",
    "question_no": "12",
    "question_text": "Consider a rooted n node binary tree represented using pointers. The best upper bound on the time required to determine the number of subtrees having exactly 4 nodes is O(nª logᵇ n). Then the value of a + 10b is ______.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE2014_CS_OCR",
    "confidence": 0.9
  },
  {
    "year": 2014,
    "paper_code": "CS",
    "question_no": "14",
    "question_text": "Let P be a quicksort program to sort numbers in ascending order using the first element as the pivot. Let t₁ and t₂ be the number of comparisons made by P for the inputs [1 2 3 4 5] and [4 1 5 3 2] respectively. Which one of the following holds?\n(A) t₁ = 5\n(B) t₁ < t₂\n(C) t₁ > t₂\n(D) t₁ = t₂",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Searching, sorting, hashing",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE2014_CS_OCR",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS",
    "question_no": "39",
    "question_text": "The minimum number of comparisons required to find the minimum and the maximum of 100 numbers is ______.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Searching, sorting, hashing",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2014_CS_OCR",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS",
    "question_no": "40",
    "question_text": "Consider a hash table with 9 slots. The hash function is h(k) = k mod 9. The collisions are resolved by chaining. The following 9 keys are inserted in the order: 5, 28, 19, 15, 20, 33, 12, 17, 10. The maximum, minimum, and average chain lengths in the hash table, respectively, are\n(A) 3, 0, and 1\n(B) 3, 3, and 3\n(C) 4, 0, and 1\n(D) 3, 0, and 2",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Searching, sorting, hashing",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2014_CS_OCR",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS",
    "question_no": "41",
    "question_text": "Consider the following C function in which size is the number of elements in the array E:\nint MyX(int *E, unsigned int size)\n{\n    int Y = 0;\n    int Z;\n    int i, j, k;\n\n    for(i = 0; i < size; i++)\n        Y = Y + E[i];\n\n    for(i = 0; i < size; i++)\n        for(j = i; j < size; j++)\n        {\n            Z = 0;\n            for(k = i; k <= j; k++)\n                Z = Z + E[k];\n            if (Z > Y)\n                Y = Z;\n        }\n    return Y;\n}\nThe value returned by the function MyX is the\n(A) maximum possible sum of elements in any sub-array of array E.\n(B) maximum element in any sub-array of array E.\n(C) sum of the maximum elements in all possible sub-arrays of array E.\n(D) the sum of all the elements in the array E.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2014_CS_OCR",
    "confidence": 0.8
  },
  {
    "year": 2014,
    "paper_code": "CS",
    "question_no": "42",
    "question_text": "Consider the following pseudo code. What is the total number of multiplications to be performed?\nD = 2\nfor i = 1 to n do\n  for j = i to n do\n    for k = j + 1 to n do\n      D = D * 3\n(A) Half of the product of the 3 consecutive integers.\n(B) One-third of the product of the 3 consecutive integers.\n(C) One-sixth of the product of the 3 consecutive integers.\n(D) None of the above.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2014_CS_OCR",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS SET-3",
    "question_no": "Q.11",
    "question_text": "The minimum number of arithmetic operations required to evaluate the polynomial P(X) = X⁵ + 4X³ + 6X + 5 for a given value of X, using only one temporary variable is _____.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE2014_CS_SET3",
    "confidence": 0.8
  },
  {
    "year": 2014,
    "paper_code": "CS SET-3",
    "question_no": "Q.13",
    "question_text": "Suppose depth first search is executed on the graph below starting at some unknown vertex. Assume that a recursive call to visit a vertex is made only after first checking that the vertex has not been visited earlier. Then the maximum possible recursion depth (including the initial call) is _____.\n\n[Image of a graph made of two 2x2 grids connected by a path of two vertices]",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Graph traversals",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE2014_CS_SET3",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS SET-3",
    "question_no": "Q.14",
    "question_text": "You have an array of n elements. Suppose you implement quicksort by always choosing the central element of the array as the pivot. Then the tightest upper bound for the worst case performance is\n\n(A) O(n²)\n(B) O(n log n)\n(C) Θ(n log n)\n(D) O(n³)",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Searching, sorting, hashing",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE2014_CS_SET3",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS-2",
    "question_no": "13",
    "question_text": "Which one of the following correctly determines the solution of the recurrence relation with T(1) = 1? T(n) = 2T(n/2) + log n",
    "subject": "Algorithms",
    "chapter": "Asymptotic worst case time and space complexity",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2014 CS SET-2",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS-2",
    "question_no": "14",
    "question_text": "Consider the tree arcs of a BFS traversal from a source node W in an unweighted, connected, undirected graph. The tree T formed by the tree arcs is a data structure for computing",
    "subject": "Algorithms",
    "chapter": "Graph traversals, minimum spanning trees, shortest paths",
    "subtopic": "Graph traversals, minimum spanning trees, shortest paths",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2014 CS SET-2",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS-2",
    "question_no": "37",
    "question_text": "Consider two strings A = \"qpqrr\" and B = \"pqprqrp\". Let x be the length of the longest common subsequence (not necessarily contiguous) between A and B and let y be the number of such longest common subsequences between A and B. Then x + 10y =",
    "subject": "Algorithms",
    "chapter": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2014 CS SET-2",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS-2",
    "question_no": "38",
    "question_text": "Suppose P, Q, R, S, T are sorted sequences having lengths 20, 24, 30, 35, 50 respectively. They are to be merged into a single sequence by merging together two sequences at a time. The number of comparisons that will be needed in the worst case by the optimal algorithm for doing this is",
    "subject": "Algorithms",
    "chapter": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2014 CS SET-2",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS-2",
    "question_no": "52",
    "question_text": "The number of distinct minimum spanning trees for the weighted graph below is",
    "subject": "Algorithms",
    "chapter": "Graph traversals, minimum spanning trees, shortest paths",
    "subtopic": "Graph traversals, minimum spanning trees, shortest paths",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2014 CS SET-2",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "17",
    "question_text": "Given a hash table T with 25 slots that stores 2000 elements, the load factor α for T is __________.",
    "subject": "Algorithms",
    "chapter": "Searching, sorting, hashing.",
    "subtopic": "hashing.",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "17",
    "question_text": "Consider a complete binary tree where the left and the right subtrees of the root are max-heaps. The lower bound for the number of operations to convert the tree to a heap is\n(A) Ω(log n)\n(B) Ω(n)\n(C) Ω(n log n)\n(D) Ω(n²)",
    "subject": "Algorithms",
    "chapter": "Asymptotic worst case time and space complexity",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": null,
    "provenance": "GATE 2015 Examination - CS (Set 2, 7th February, Afternoon Session)",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "22",
    "question_text": "An unordered list contains n distinct elements. The number of comparisons to find an element in this list that is neither maximum nor minimum is\n(A) Θ(n log n)\n(B) Θ(n)\n(C) O(log n)\n(D) Θ(1)",
    "subject": "Algorithms",
    "chapter": "Asymptotic worst case time and space complexity",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": null,
    "provenance": "GATE 2015 Examination - CS (Set 2, 7th February, Afternoon Session)",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "27",
    "question_text": "Assume that a mergesort algorithm in the worst case takes 30 seconds for an input of size 64. Which of the following most closely approximates the maximum input size of a problem that can be solved in 6 minutes?\n(A) 256\n(B) 512\n(C) 1024\n(D) 2048",
    "subject": "Algorithms",
    "chapter": "Asymptotic worst case time and space complexity.",
    "subtopic": "Asymptotic worst case time and space complexity.",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "33",
    "question_text": "Which one of the following hash functions on integers will distribute keys most uniformly over 10 buckets numbered 0 to 9 for i ranging from 0 to 2020?\n(A) h(i) = i² mod 10\n(B) h(i) = i³ mod 10\n(C) h(i) = (11 * i²) mod 10\n(D) h(i) = (12 * i) mod 10",
    "subject": "Algorithms",
    "chapter": "Searching, sorting, hashing",
    "subtopic": "Searching, sorting, hashing",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 Examination - CS (Set 2, 7th February, Afternoon Session)",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "36",
    "question_text": "Given below are some algorithms, and some algorithm design paradigms.\n1. Dijkstra's Shortest Path\ti. Divide and Conquer\n2. Floyd-Warshall algorithm to compute all pairs shortest path\tii. Dynamic Programming\n3. Binary search on a sorted array\tiii. Greedy design\n4. Backtracking search on a graph\tiv. Depth-first search\n\t\t\t\tv. Breadth-first search\nMatch the above algorithms on the left to the corresponding design paradigm they follow.\n(A) 1-i, 2-iii, 3-i, 4-v.\n(B) 1-iii, 2-iii, 3-i, 4-v.\n(C) 1-iii, 2-ii, 3-i, 4-iv.\n(D) 1-iii, 2-ii, 3-i, 4-v.",
    "subject": "Algorithms",
    "chapter": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "theoretical_practical": "theoretical",
    "marks": null,
    "provenance": "GATE 2015 Examination - CS (Set 2, 7th February, Afternoon Session)",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "4",
    "question_text": "Consider the equality Σᵢ₌₀ⁿ i³ = X and the following choices for X\nI. Θ(n⁴)\nII. Θ(n⁵)\nIII. O(n⁵)\nIV. Ω(n³)\nThe equality above remains correct if X is replaced by\n(A) Only I\n(B) Only II\n(C) I or III or IV but not II\n(D) II or III or IV but not I",
    "subject": "Algorithms",
    "chapter": "Asymptotic worst case time and space complexity.",
    "subtopic": "Asymptotic worst case time and space complexity.",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "40",
    "question_text": "Let G be a connected undirected graph of 100 vertices and 300 edges. The weight of a minimum spanning tree of G is 500. When the weight of each edge of G is increased by five, the weight of a minimum spanning tree becomes _________.",
    "subject": "Algorithms",
    "chapter": "Graph traversals, minimum spanning trees, shortest paths.",
    "subtopic": "minimum spanning trees",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "42",
    "question_text": "Let f(n) = n and g(n) = n⁽¹⁺ˢⁱⁿ ⁿ⁾, where n is a positive integer. Which of the following statements is/are correct?\nI. f(n) = O(g(n))\nII. f(n) = Ω(g(n))\n(A) Only I\n(B) Only II\n(C) Both I and II\n(D) Neither I nor II",
    "subject": "Algorithms",
    "chapter": "Asymptotic worst case time and space complexity.",
    "subtopic": "Asymptotic worst case time and space complexity.",
    "theoretical_practical": "theoretical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "45",
    "question_text": "Suppose you are provided with the following function declaration in the C programming language.\nint partition(int a[], int n);\nThe function treats the first element of a[] as a pivot, and rearranges the array so that all elements less than or equal to the pivot is in the left part of the array, and all elements greater than the pivot is in the right part. In addition, it moves the pivot so that the pivot is the last element of the left part. The return value is the number of elements in the left part.\nThe following partially given function in the C programming language is used to find the kᵗʰ smallest element in an array a[] of size n using the partition function. We assume k ≤ n.\n\nint kth_smallest(int a[], int n, int k)\n{\n  int left_end = partition(a,n);\n  if (left_end+1 == k) {\n    return a[left_end];\n  }\n  if (left_end+1 > k) {\n    return kth_smallest( __________ );\n  } else {\n    return kth_smallest( __________ );\n  }\n}\n\nThe missing argument lists are respectively\n(A) (a, left_end, k) and (a+left_end+1, n-left_end-1, k-left_end-1)\n(B) (a, left_end, k) and (a, n-left_end-1, k-left_end-1)\n(C) (a+left_end+1, n-left_end-1, k-left_end-1) and (a, left_end, k)\n(D) (a, n-left_end-1, k-left_end-1) and (a, left_end, k)",
    "subject": "Algorithms",
    "chapter": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 Examination - CS (Set 2, 7th February, Afternoon Session)",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "49",
    "question_text": "Suppose c = (c[0], ..., c[k - 1]) is an array of length k, where all the entries are from the set {0, 1}. For any positive integers a and n, consider the following pseudocode.\nDOSOMETHING (c, a, n)\n    z ← 1\n    for i ← 0 to k-1\n        do z ← z² mod n\n           if c[i] = 1\n               then z ← (z × a) mod n\n    return z\nIf k = 4, c = (1, 0, 1, 1), a = 2 and n = 8, then the output of DOSOMETHING(c, a, n) is __________.",
    "subject": "Algorithms",
    "chapter": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer.",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer. approximate",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 0.8
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 2",
    "question_text": "Which one of the following is the recurrence equation for the worst case time complexity of the Quicksort algorithm for sorting n (≥ 2) numbers? In the recurrence equations given in the options below, c is a constant.\n(A) T(n) = 2T(n/2) + cn\n(B) T(n) = T(n-1) + T(1) + cn\n(C) T(n) = 2T(n - 1) + cn\n(D) T(n) = T(n/2) + cn",
    "subject": "Algorithms",
    "chapter": "Asymptotic worst case time and space complexity",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 23",
    "question_text": "What are the worst-case complexities of insertion and deletion of a key in a binary search tree?\n(A) Θ(log n) for both insertion and deletion\n(B) Θ(n) for both insertion and deletion\n(C) Θ(n) for insertion and Θ(log n) for deletion\n(D) Θ(log n) for insertion and Θ(n) for deletion",
    "subject": "Algorithms",
    "chapter": "Asymptotic worst case time and space complexity",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 31",
    "question_text": "Consider the following C function.\n\nint fun1(int n) {\n  int i, j, k, p, q=0;\n  for (i=1; i<n; ++i) {\n    p=0;\n    for (j=n; j>1; j=j/2)\n      ++p;\n    for (k=1; k<p; k=k*2)\n      ++q;\n  }\n  return q;\n}\n\nWhich one of the following most closely approximates the return value of the function fun1?\n(A) n³\n(B) n(log n)²\n(C) n log n\n(D) n log(log n)",
    "subject": "Algorithms",
    "chapter": "Asymptotic worst case time and space complexity",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 33",
    "question_text": "Consider the following pseudo code, where x and y are positive integers.\nbegin\n  q := 0\n  r := x\n  while r ≥ y do\n  begin\n    r := r - y\n    q := q + 1\n  end\nend\nThe post condition that needs to be satisfied after the program terminates is\n(A) {r = qx + y ∧ r < y}\n(B) {x = qy + r ∧ r < y}\n(C) {y = qx + r ∧ 0 < r < y}\n(D) {q+1 < r-y ∧ y > 0}",
    "subject": "Algorithms",
    "chapter": "OTHER: Program Logic and Verification",
    "subtopic": "OTHER: Algorithm Correctness and Loop Invariants",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 0.4
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 40",
    "question_text": "An algorithm performs (log N)¹ᐟ² find operations, N insert operations, (log N)¹ᐟ² delete operations, and (log N)¹ᐟ² decrease-key operations on a set of data items with keys drawn from a linearly ordered set. For a delete operation, a pointer is provided to the record that must be deleted. For the decrease-key operation, a pointer is provided to the record that has its key decreased. Which one of the following data structures is the most suited for the algorithm to use, if the goal is to achieve the best total asymptotic complexity considering all the operations?\n(A) Unsorted array\n(B) Min-heap\n(C) Sorted array\n(D) Sorted doubly linked list",
    "subject": "Algorithms",
    "chapter": "Asymptotic worst case time and space complexity",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 43",
    "question_text": "The graph shown below has 8 edges with distinct integer edge weights. The minimum spanning tree (MST) is of weight 36 and contains the edges: {(A, C), (B, C), (B, E), (E, F), (D, F)}. The edge weights of only those edges which are in the MST are given in the figure shown below. The minimum possible sum of weights of all 8 edges of this graph is ______",
    "subject": "Algorithms",
    "chapter": "Graph traversals, minimum spanning trees, shortest paths",
    "subtopic": "minimum spanning trees",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 45",
    "question_text": "Let G = (V, E) be a simple undirected graph, and s be a particular vertex in it called the source. For x∈V, let d(x) denote the shortest distance in G from s to x. A breadth first search (BFS) is performed starting at s. Let T be the resultant BFS tree. If (u,v) is an edge of G that is not in T, then which one of the following CANNOT be the value of d(u) - d(v)?\n(A) -1\n(B) 0\n(C) 1\n(D) 2",
    "subject": "Algorithms",
    "chapter": "Graph traversals, minimum spanning trees, shortest paths",
    "subtopic": "Graph traversals",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 6",
    "question_text": "Match the following:\n(P) Prim's algorithm for minimum spanning tree\n(Q) Floyd-Warshall algorithm for all pairs shortest paths\n(R) Mergesort\n(S) Hamiltonian circuit\n\n(i) Backtracking\n(ii) Greedy method\n(iii) Dynamic programming\n(iv) Divide and conquer\n\n(A) P-iii, Q-ii, R-iv, S-i\n(B) P-i, Q-ii, R-iv, S-iii\n(C) P-ii, Q-iii, R-iv, S-i\n(D) P-ii, Q-i, R-iii, S-iv",
    "subject": "Algorithms",
    "chapter": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q.7",
    "question_text": "Consider two functions of time (t), f(t) = 0.01 t^2, g(t) = 4t, where 0 < t < infinity. Now consider the following two statements: (i) For some t > 0, g(t) > f(t). (ii) There exists a T, such that f(t) > g(t) for all t > T. Which one of the following options is TRUE?",
    "subject": "Algorithms",
    "chapter": "Asymptotic Analysis",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE-2015-CS-Paper-1",
    "confidence": 0.9
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.11",
    "question_text": "Consider the following directed graph:\n[Image of a directed acyclic graph]\nThe number of different topological orderings of the vertices of the graph is __________.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Graph traversals",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2016 CS Set A",
    "confidence": 0.9
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.13",
    "question_text": "Assume that the algorithms considered here sort the input sequences in ascending order. If the input is already in ascending order, which of the following are TRUE?\nI. Quicksort runs in Θ(n²) time\nII. Bubblesort runs in Θ(n²) time\nIII. Mergesort runs in Θ(n) time\nIV. Insertion sort runs in Θ(n) time\n(A) I and II only\n(B) I and III only\n(C) II and IV only\n(D) I and IV only",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2016 CS Set-B",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.13",
    "question_text": "The worst case running times of Insertion sort, Merge sort and Quick sort, respectively, are:\n(A) Θ(n log n), Θ(n log n), and Θ(n²)\n(B) Θ(n²), Θ(n²), and Θ(n log n)\n(C) Θ(n²), Θ(n log n), and Θ(n log n)\n(D) Θ(n²), Θ(n log n), and Θ(n²)",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Searching, sorting, hashing",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2016 CS Set A",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.14",
    "question_text": "The Floyd-Warshall algorithm for all-pair shortest paths computation is based on\n(A) Greedy paradigm.\n(B) Divide-and-Conquer paradigm.\n(C) Dynamic Programming paradigm.\n(D) neither Greedy nor Divide-and-Conquer nor Dynamic Programming paradigm.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2016 CS Set-B",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.14",
    "question_text": "Let G be a weighted connected undirected graph with distinct positive edge weights. If every edge weight is increased by the same value, then which of the following statements is/are TRUE?\n\nP: Minimum spanning tree of G does not change\nQ: Shortest path between any pair of vertices does not change\n\n(A) P only\n(B) Q only\n(C) Neither P nor Q\n(D) Both P and Q",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "minimum spanning trees",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2016 CS Set A",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.15",
    "question_text": "N items are stored in a sorted doubly linked list. For a delete operation, a pointer is provided to the record to be deleted. For a decrease-key operation, a pointer is provided to the record on which the operation is to be performed.\nAn algorithm performs the following operations on the list in this order: Θ(N) delete, O(log N) insert, O(log N) find, and Θ(N) decrease-key. What is the time complexity of all these operations put together?\n(A) O(log² N) (B) O(N) (C) O(N²) (D) Θ(N² log N)",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2016 CS Set-B",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.35",
    "question_text": "The following function computes X^Y for positive integers X and Y.\nint exp(int X, int Y) {\nint res = 1, a = X, b = Y;\nwhile ( b != 0 ){\nif ( b%2 == 0) { a = a*a; b = b/2; }\nelse { res = res*a; b = b-1; }\n}\nreturn res;\n}\nWhich one of the following conditions is TRUE before every iteration of the loop?\n(A) X^Y = a^b\n(B) (res * a)^Y = (res * X)^b\n(C) X^Y = res * a^b\n(D) X^Y = (res * a)^b",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2016 CS Set-B",
    "confidence": 0.8
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.38",
    "question_text": "Let A₁,A₂,A₃, and A₄ be four matrices of dimensions 10 × 5, 5 × 20, 20 × 10, and 10 × 5, respectively. The minimum number of scalar multiplications required to find the product A₁A₂A₃A₄ using the basic matrix multiplication method is __________.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2016 CS Set-B",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.39",
    "question_text": "The given diagram shows the flowchart for a recursive function A(n). Assume that all statements, except for the recursive calls, have O(1) time complexity. If the worst case time complexity of this function is O(n^α), then the least possible value (accurate up to two decimal positions) of α is __________.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2016 CS Set-B",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.41",
    "question_text": "In an adjacency list representation of an undirected simple graph G = (V, E), each edge (u, v) has two adjacency list entries: [v] in the adjacency list of u, and [u] in the adjacency list of v. These are called twins of each other. A twin pointer is a pointer from an adjacency list entry to its twin. If |E| = m and |V| = n, and the memory size is not a constraint, what is the time complexity of the most efficient algorithm to set the twin pointer in each entry in each adjacency list?\n(A) Θ(n²)\n(B) Θ(n + m)\n(C) Θ(m²)\n(D) Θ(n²)",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2016 CS Set-B",
    "confidence": 1
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "26",
    "question_text": "Let G = (V, E) be any connected undirected edge-weighted graph. The weights of the edges in E are positive and distinct. Consider the following statements:\n(I) Minimum Spanning Tree of G is always unique.\n(II) Shortest path between any two vertices of G is always unique.\nWhich of the above statements is/are necessarily true?\n(A) (I) only\n(B) (II) only\n(C) both (I) and (II)\n(D) neither (I) nor (II)",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "minimum spanning trees, shortest paths",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2017 CS",
    "confidence": 1
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "3",
    "question_text": "Match the algorithms with their time complexities:\n(P) Towers of Hanoi with n disks\n(Q) Binary search given n sorted numbers\n(R) Heap sort given n numbers at the worst case\n(S) Addition of two n x n matrices\nwith\n(i) Θ(n²)\n(ii) O(n log n)\n(iii) Θ(2^n)\n(iv) O(log n)",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2017 Session 2",
    "confidence": 1
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "4",
    "question_text": "Consider the following functions from positive integers to real numbers:\n10, √n, n, log₂n, 100/n\nThe CORRECT arrangement of the above functions in increasing order of asymptotic complexity is:\n(A) log₂n, 100/n, 10, √n, n\n(B) 100/n, 10, log₂n, √n, n\n(C) 10, 100/n, √n, log₂n, n\n(D) 100/n, log₂n, 10, √n, n",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2017 CS",
    "confidence": 1
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "48",
    "question_text": "Let A be an array of 31 numbers consisting of a sequence of 0's followed by a sequence of 1's. The problem is to find the smallest index i such that A[i] is 1 by probing the minimum number of locations in A. The worst case number of probes performed by an optimal algorithm is _____.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Searching, sorting, hashing",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2017 CS",
    "confidence": 1
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "5",
    "question_text": "Consider the following table:\nAlgorithms | Design Paradigms\n(P) Kruskal | (i) Divide and Conquer\n(Q) Quicksort | (ii) Greedy\n(R) Floyd-Warshall | (iii) Dynamic Programming\nMatch the algorithms to the design paradigms they are based on.\n(A) (P)→(ii), (Q)→(iii), (R)→(i)\n(B) (P)→(iii), (Q)→(i), (R)→(ii)\n(C) (P)→(ii), (Q)→(i), (R)→(iii)\n(D) (P)→(i), (Q)→(ii), (R)→(iii)",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2017 CS",
    "confidence": 1
  },
  {
    "year": 2018,
    "paper_code": "CS",
    "question_no": "30",
    "question_text": "Let G be a simple undirected graph. Let Tᴅ be a depth first search tree of G. Let Tʙ be a breadth first search tree of G. Consider the following statements.\n(I) No edge of G is a cross edge with respect to Tᴅ. (A cross edge in G is between two nodes neither of which is an ancestor of the other in Tᴅ.)\n(II) For every edge (u,v) of G, if u is at depth i and v is at depth j in Tʙ, then |i – j| = 1.\nWhich of the statements above must necessarily be true?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Graph traversals",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2018",
    "confidence": 1
  },
  {
    "year": 2018,
    "paper_code": "CS",
    "question_no": "31",
    "question_text": "Assume that multiplying a matrix G₁ of dimension p × q with another matrix G₂ of dimension q × r requires pqr scalar multiplications. Computing the product of n matrices G₁G₂G₃...Gₙ can be done by parenthesizing in different ways. Define GᵢGᵢ₊₁ as an explicitly computed pair for a given paranthesization if they are directly multiplied. For example, in the matrix multiplication chain G₁G₂G₃G₄G₅G₆ using parenthesization (G₁(G₂G₃))(G₄(G₅G₆)), G₂G₃ and G₅G₆ are the only explicitly computed pairs.\nConsider a matrix multiplication chain F₁F₂F₃F₄F₅, where matrices F₁, F₂, F₃, F₄ and F₅ are of dimensions 2×25, 25×3, 3×16, 16×1 and 1×1000, respectively. In the parenthesization of F₁F₂F₃F₄F₅ that minimizes the total number of scalar multiplications, the explicitly computed pairs is/are",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2018",
    "confidence": 1
  },
  {
    "year": 2018,
    "paper_code": "CS",
    "question_no": "47",
    "question_text": "Consider the following undirected graph G: Choose a value for x that will maximize the number of minimum weight spanning trees (MWSTs) of G. The number of MWSTs of G for this value of x is ____.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "minimum spanning trees",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2018",
    "confidence": 1
  },
  {
    "year": 2018,
    "paper_code": "CS",
    "question_no": "48",
    "question_text": "Consider the weights and values of items listed below. Note that there is only one unit of each item.\nThe task is to pick a subset of these items such that their total weight is no more than 11 Kgs and their total value is maximized. Moreover, no item may be split. The total value of items picked by an optimal algorithm is denoted by Vopt. A greedy algorithm sorts the items by their value-to-weight ratios in descending order and packs them greedily, starting from the first item in the ordered list. The total value of items picked by the greedy algorithm is denoted by Vgreedy.\nThe value of Vopt − Vgreedy is ____.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2018",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "2",
    "question_text": "For parameters a and b, both of which are ω(1), T(n)=T(n¹/ᵃ)+1, and T(b) = 1.\nThen T(n) is",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "23",
    "question_text": "Consider a double hashing scheme in which the primary hash function is h₁(k) = k mod 23, and the secondary hash function is h₂(k)=1+(k mod 19). Assume that the table size is 23. Then the address returned by probe 1 in the probe sequence (assume that the probe sequence begins at probe 0) for key value k = 90 is _____",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Searching, sorting, hashing",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "31",
    "question_text": "Let G = (V,E) be a weighted undirected graph and let T be a Minimum Spanning Tree (MST) of G maintained using adjacency lists. Suppose a new weighted edge (u, v) ∉ E is added to G. The worst case time complexity of determining if T is still an MST of the resultant graph is",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "minimum spanning trees",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "40",
    "question_text": "Let G = (V, E) be a directed, weighted graph with weight function w: E→ℝ. For some function f: V→ℝ, for each edge (u, v) ∈ E, define w'(u,v) as w(u, v)+f(u)-f(v).\nWhich one of the options completes the following sentence so that it is TRUE?\n\"The shortest paths in G under w are shortest paths under w' too, ____.\"",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "shortest paths",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "49",
    "question_text": "Consider a graph G = (V,E), where V = {v₁, v₂, ..., v₁₀₀}, E = {(vᵢ, vⱼ)|1 ≤ i< j ≤ 100}, and weight of the edge (vᵢ,vⱼ) is |i-j|. The weight of minimum spanning tree of G is _____",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "minimum spanning trees",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS Q.1",
    "question_text": "Let G be a connected undirected weighted graph. Consider the following two statements.\n\nS1: There exists a minimum weight edge in G which is present in every minimum spanning tree of G.\nS2: If every edge in G has distinct weight, then G has a unique minimum spanning tree.\n\nWhich one of the following options is correct?\n\n(A) Both S1 and S2 are true.\n(B) S1 is true and S2 is false.\n(C) S1 is false and S2 is true.\n(D) Both S1 and S2 are false.",
    "subject": "Section 5: Algorithms",
    "chapter": "Algorithms",
    "subtopic": "minimum spanning trees",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2021 CS Set-2",
    "confidence": 1.0
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS Q.16",
    "question_text": "Consider a complete binary tree with 7 nodes. Let A denote the set of first 3 elements obtained by performing Breadth-First Search (BFS) starting from the root. Let B denote the set of first 3 elements obtained by performing Depth-First Search (DFS) starting from the root.\nThe value of |A − B| is ____________.",
    "subject": "Section 5: Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Graph traversals, minimum spanning trees, shortest paths",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2021 CS Set-2",
    "confidence": 0.9
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS Q.26",
    "question_text": "Consider the string abbccddeee. Each letter in the string must be assigned a binary code satisfying the following properties:\n1. For any two letters, the code assigned to one letter must not be a prefix of the code assigned to the other letter.\n2. For any two letters of the same frequency, the letter which occurs earlier in the dictionary order is assigned a code whose length is at most the length of the code assigned to the other letter.\nAmong the set of all binary code assignments which satisfy the above two properties, what is the minimum length of the encoded string?\n\n(A) 21\n(B) 23\n(C) 25\n(D) 30",
    "subject": "Section 5: Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2021 CS Set-2",
    "confidence": 0.9
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS Q.39",
    "question_text": "For constants a ≥ 1 and b > 1, consider the following recurrence defined on the non-negative integers:\n\nT(n) = a * T(n/b) + f(n)\n\nWhich one of the following options is correct about the recurrence T(n)?\n\n(A) If f(n) is n log₂(n), then T(n) is Θ(n log₂(n)).\n(B) If f(n) is n / log₂(n), then T(n) is Θ(log₂(n)).\n(C) If f(n) is O(n^(log_b(a) - ε)) for some ε > 0, then T(n) is Θ(n^(log_b(a))).\n(D) If f(n) is Θ(n^(log_b(a))), then T(n) is Θ(n^(log_b(a))).",
    "subject": "Section 5: Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2021 CS Set-2",
    "confidence": 1.0
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS Q.55",
    "question_text": "In a directed acyclic graph with a source vertex s, the quality-score of a directed path is defined to be the product of the weights of the edges on the path. Further, for a vertex v other than s, the quality-score of v is defined to be the maximum among the quality-scores of all the paths from s to v. The quality-score of s is assumed to be 1.\n(Image of a directed acyclic graph with weighted edges)\nThe sum of the quality-scores of all the vertices in the graph shown above is ____________.",
    "subject": "Section 5: Algorithms",
    "chapter": "Algorithms",
    "subtopic": "shortest paths",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2021 CS Set-2",
    "confidence": 0.9
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS Q.8",
    "question_text": "What is the worst-case number of arithmetic operations performed by recursive binary search on a sorted array of size n?\n\n(A) Θ(√n)\n(B) Θ(log2(n))\n(C) Θ(n^2)\n(D) Θ(n)",
    "subject": "Section 5: Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2021 CS Set-2",
    "confidence": 1.0
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS-Q.17",
    "question_text": "Consider the following undirected graph with edge weights as shown:\n[Image of a graph]\nThe number of minimum-weight spanning trees of the graph is ____",
    "subject": "Algorithms",
    "chapter": "Graph traversals, minimum spanning trees, shortest paths",
    "subtopic": "minimum spanning trees",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2021 CS Set-1",
    "confidence": 1
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS-Q.2",
    "question_text": "Let P be an array containing n integers. Let t be the lowest upper bound on the number of comparisons of the array elements, required to find the minimum and maximum values in an arbitrary array of n elements. Which one of the following choices is correct?\n\n(A) t > 2n − 2\n(B) t > 3⌈n/2⌉ and t ≤ 2n − 2\n(C) t > n and t ≤ 3⌈n/2⌉\n(D) t > ⌈log₂(n)⌉ and t ≤ n",
    "subject": "Algorithms",
    "chapter": "Asymptotic worst case time and space complexity",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2021 CS Set-1",
    "confidence": 1
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS-Q.3",
    "question_text": "Consider the following three functions.\n\nf₁ = 10ⁿ\nf₂ = nˡᵒᵍⁿ\nf₃ = n^√n\n\nWhich one of the following options arranges the functions in the increasing order of asymptotic growth rate?\n\n(A) f₃, f₂, f₁\n(B) f₂, f₁, f₃\n(C) f₁, f₂, f₃\n(D) f₂, f₃, f₁",
    "subject": "Algorithms",
    "chapter": "Asymptotic worst case time and space complexity",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2021 CS Set-1",
    "confidence": 1
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS-Q.9",
    "question_text": "Consider the following array.\n\n[23 | 32 | 45 | 69 | 72 | 73 | 89 | 97]\n\nWhich algorithm out of the following options uses the least number of comparisons (among the array elements) to sort the above array in ascending order?\n\n(A) Selection sort\n(B) Mergesort\n(C) Insertion sort\n(D) Quicksort using the last element as pivot",
    "subject": "Algorithms",
    "chapter": "Searching, sorting, hashing",
    "subtopic": "Searching, sorting, hashing",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2021 CS Set-1",
    "confidence": 1
  },
  {
    "year": 2022,
    "paper_code": "CS",
    "question_no": "Q.11",
    "question_text": "Which one of the following statements is TRUE for all positive functions f(n)?\n\n(A) f(n²) = θ(f(n)²), when f(n) is a polynomial\n(B) f(n²) = o(f(n)²)\n(C) f(n²) = O(f(n)²), when f(n) is an exponential function\n(D) f(n²) = Ω(f(n)²) ",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2022 CS",
    "confidence": 1
  },
  {
    "year": 2022,
    "paper_code": "CS",
    "question_no": "Q.16",
    "question_text": "Suppose we are given n keys, m hash table slots, and two simple uniform hash functions h₁ and h₂. Further suppose our hashing scheme uses h₁ for the odd keys and h₂ for the even keys. What is the expected number of keys in a slot?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "hashing",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2022 CS",
    "confidence": 1
  },
  {
    "year": 2022,
    "paper_code": "CS",
    "question_no": "Q.49",
    "question_text": "Consider a simple undirected weighted graph G, all of whose edge weights are distinct. Which of the following statements about the minimum spanning trees of G is/are TRUE?\n\n(A) The edge with the second smallest weight is always part of any minimum spanning tree of G.\n(B) One or both of the edges with the third smallest and the fourth smallest weights are part of any minimum spanning tree of G.\n(C) Suppose S ⊂ V be such that S ≠ ∅ and S ≠ V. Consider the edge with the minimum weight such that one of its vertices is in S and the other in V \\ S. Such an edge will always be part of any minimum spanning tree of G.\n(D) G can have multiple minimum spanning trees.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "minimum spanning trees",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2022 CS",
    "confidence": 1
  },
  {
    "year": 2023,
    "paper_code": "CS",
    "question_no": "Q.20",
    "question_text": "An algorithm has to store several keys generated by an adversary in a hash table. The adversary is malicious who tries to maximize the number of collisions. Let k be the number of keys, m be the number of slots in the hash table, and k > m. Which one of the following is the best hashing strategy to counteract the adversary?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Searching, sorting, hashing",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE-2023-CS-Paper",
    "confidence": 1
  },
  {
    "year": 2023,
    "paper_code": "CS",
    "question_no": "Q.29",
    "question_text": "Let f and g be functions of natural numbers given by f(n) = n and g(n) = n^2. Which of the following statements is/are TRUE?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE-2023-CS-Paper",
    "confidence": 1
  },
  {
    "year": 2023,
    "paper_code": "CS",
    "question_no": "Q.46",
    "question_text": "Let A be a priority queue for maintaining a set of elements. Suppose A is implemented using a max-heap data structure. The operation EXTRACT-MAX(A) extracts and deletes the maximum element from A. The operation INSERT(A,key) inserts a new element key in A. The properties of a max-heap are preserved at the end of each of these operations. When A contains n elements, which one of the following statements about the worst case running time of these two operations is TRUE?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE-2023-CS-Paper",
    "confidence": 1
  },
  {
    "year": 2023,
    "paper_code": "CS",
    "question_no": "Q.54",
    "question_text": "Consider functions Function_1 and Function_2 expressed in pseudocode as follows: [code for Function_1 and Function_2]. Let f1(n) and f2(n) denote the number of times the statement “x = x + 1” is executed in Function_1 and Function_2, respectively. Which of the following statements is/are TRUE?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE-2023-CS-Paper",
    "confidence": 1
  },
  {
    "year": 2023,
    "paper_code": "CS",
    "question_no": "Q.55",
    "question_text": "Let G be a simple, finite, undirected graph with vertex set {v1, . . . , vn}. Let Δ(G) denote the maximum degree of G and let N = {1, 2, . . . } denote the set of all possible colors. Color the vertices of G using the following greedy strategy: for i = 1, . . . , n, color(vi) <- min{j ∈ N : no neighbour of vi is colored j}. Which of the following statements is/are TRUE?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE-2023-CS-Paper",
    "confidence": 1
  },
  {
    "year": 2023,
    "paper_code": "CS",
    "question_no": "Q.56",
    "question_text": "Let U = {1,2,3}. Let 2^U denote the powerset of U. Consider an undirected graph G whose vertex set is 2^U. For any A, B ∈ 2^U, (A, B) is an edge in G if and only if (i) A ≠ B, and (ii) either A ⊆ B or B ⊆ A. For any vertex A in G, the set of all possible orderings in which the vertices of G can be visited in a Breadth First Search (BFS) starting from A is denoted by B(A). If Ø denotes the empty set, then the cardinality of B(Ø) is _______.",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Graph traversals, minimum spanning trees, shortest paths",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE-2023-CS-Paper",
    "confidence": 1
  },
  {
    "year": 2024,
    "paper_code": "Computer Science and Information Technology Set 2 (CS2)",
    "question_no": "Q.35",
    "question_text": "Let A be an array containing integer values. The distance of A is defined as the minimum number of elements in A that must be replaced with another integer so that the resulting array is sorted in non-decreasing order. The distance of the array [2, 5, 3, 1, 4, 2, 6] is ________",
    "subject": "Algorithms",
    "chapter": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer.",
    "subtopic": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer.",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE2024_CS2_IISc",
    "confidence": 0.9
  },
  {
    "year": 2024,
    "paper_code": "Computer Science and Information Technology Set 2 (CS2)",
    "question_no": "Q.42",
    "question_text": "Consider an array X that contains n positive integers. A subarray of X is defined to be a sequence of array locations with consecutive indices. The C code snippet given below has been written to compute the length of the longest subarray of X that contains at most two distinct integers. The code has two missing expressions labelled (P) and (Q). Which one of the following options gives the CORRECT missing expressions?",
    "subject": "Algorithms",
    "chapter": "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer.",
    "subtopic": "OTHER: Sliding Window Technique (approximate)",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2024_CS2_IISc",
    "confidence": 0.7
  },
  {
    "year": 2024,
    "paper_code": "Computer Science and Information Technology Set 2 (CS2)",
    "question_no": "Q.51",
    "question_text": "Let G be an undirected connected graph in which every edge has a positive integer weight. Suppose that every spanning tree in G has even weight. Which of the following statements is/are TRUE for every such graph G ?\n\n(A) All edges in G have even weight\n(B) All edges in G have even weight OR all edges in G have odd weight\n(C) In each cycle C in G, all edges in C have even weight\n(D) In each cycle C in G, either all edges in C have even weight OR all edges in C have odd weight",
    "subject": "Algorithms",
    "chapter": "Graph traversals, minimum spanning trees, shortest paths.",
    "subtopic": "Graph traversals, minimum spanning trees, shortest paths.",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE2024_CS2_IISc",
    "confidence": 1
  },
  {
    "year": 2024,
    "paper_code": "Computer Science and Information Technology Set 2 (CS2)",
    "question_no": "Q.59",
    "question_text": "The number of distinct minimum-weight spanning trees of the following graph is ________",
    "subject": "Algorithms",
    "chapter": "Graph traversals, minimum spanning trees, shortest paths.",
    "subtopic": "Graph traversals, minimum spanning trees, shortest paths.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2024_CS2_IISc",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS1",
    "question_no": "Q.18",
    "question_text": "Let G be any undirected graph with positive edge weights, and T be a minimum spanning tree of G. For any two vertices, u and v, let d1(u,v) and d2(u,v) be the shortest distances between u and v in G and T, respectively. Which ONE of the options is CORRECT for all possible G, T, u and v?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "minimum spanning trees, shortest paths",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2025 CS1 Paper",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS1",
    "question_no": "Q.20",
    "question_text": "Consider the following recurrence relation: T(n) = 2T(n-1) + n2^n for n > 0, T(0) = 1. Which ONE of the following options is CORRECT?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2025 CS1 Paper",
    "confidence": 0.9
  },
  {
    "year": 2025,
    "paper_code": "CS1",
    "question_no": "Q.33",
    "question_text": "The pseudocode of a function fun() is given below:\nfun(int A[0,...,n-1]){\n  for i=0 to n-2\n    for j=0 to n-i-2\n      if (A[j]>A[j+1])\n        then swap A[j] and A[j+1]\n}\nLet A[0, ...,29] be an array storing 30 distinct integers in descending order. The number of swap operations that will be performed, if the function fun() is called with A[0, ...,29] as argument, is ______. (Answer in integer)",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Searching, sorting, hashing",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2025 CS1 Paper",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS1",
    "question_no": "Q.43",
    "question_text": "Let G(V,E) be an undirected and unweighted graph with 100 vertices. Let d(u,v) denote the number of edges in a shortest path between vertices u and v in V. Let the maximum value of d(u,v), u,v in V such that u!=v, be 30. Let T be any breadth-first-search tree of G. Which ONE of the given options is CORRECT for every such graph G?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Graph traversals, minimum spanning trees, shortest paths",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2025 CS1 Paper",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS1",
    "question_no": "Q.64",
    "question_text": "The maximum value of x such that the edge between the nodes B and C is included in every minimum spanning tree of the given graph is ______. (answer in integer)",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "minimum spanning trees",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2025 CS1 Paper",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS1",
    "question_no": "Q.65",
    "question_text": "In a double hashing scheme, h1(k) = k mod 11 and h2(k) = 1 + (k mod 7) are the auxiliary hash functions. The size m of the hash table is 11. The hash function for the i-th probe in the open address table is [h1(k) + i*h2(k)] mod m. The following keys are inserted in the given order: 63, 50, 25, 79, 67, 24. The slot at which key 24 gets stored is ______. (Answer in integer)",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Searching, sorting, hashing",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2025 CS1 Paper",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS2",
    "question_no": "Q.20",
    "question_text": "Consider an unordered list of N distinct integers. What is the minimum number of element comparisons required to find an integer in the list that is NOT the largest in the list?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2025 Mock",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS2",
    "question_no": "Q.29",
    "question_text": "Which of the following statements regarding Breadth First Search (BFS) and Depth First Search (DFS) on an undirected simple graph G is/are TRUE?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Graph traversals, minimum spanning trees, shortest paths",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2025 Mock",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS2",
    "question_no": "Q.37",
    "question_text": "Let G be an edge-weighted undirected graph with positive edge weights. Suppose a positive constant α is added to the weight of every edge. Which ONE of the following statements is TRUE about the minimum spanning trees (MSTs) and shortest paths (SPs) in G before and after the edge weight update?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "minimum spanning trees, shortest paths",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2025 Mock",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS2",
    "question_no": "Q.38",
    "question_text": "A meld operation on two instances of a data structure combines them into one single instance of the same data structure. Consider the following data structures:\n\nP: Unsorted doubly linked list with pointers to the head node and tail node of the list.\nQ: Min-heap implemented using an array.\nR: Binary Search Tree.\n\nWhich ONE of the following options gives the worst-case time complexities for meld operation on instances of size n of these data structures?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Asymptotic worst case time and space complexity",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2025 Mock",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS2",
    "question_no": "Q.41",
    "question_text": "An array A of length n with distinct elements is said to be bitonic if there is an index 1 ≤ i ≤ n such that A[1..i] is sorted in the non-decreasing order and A[i+1..n] is sorted in the non-increasing order. Which ONE of the following represents the best possible asymptotic bound for the worst-case number of comparisons by an algorithm that searches for an element in a bitonic array A?",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Searching, sorting, hashing",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2025 Mock",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS2",
    "question_no": "Q.59",
    "question_text": "Consider the following algorithm someAlgo that takes an undirected graph G as input.\n\nsomeAlgo (G)\n1. Let v be any vertex in G. Run BFS on G starting at v. Let u be a vertex in G at maximum distance from v as given by the BFS.\n2. Run BFS on G again with u as the starting vertex. Let z be the vertex at maximum distance from u as given by the BFS.\n3. Output the distance between u and z in G.\n\nThe output of someAlgo (T) for the tree shown in the given figure is __________.\n(Answer in integer)",
    "subject": "Algorithms",
    "chapter": "Algorithms",
    "subtopic": "Graph traversals, minimum spanning trees, shortest paths",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2025 Mock",
    "confidence": 1
  }
]