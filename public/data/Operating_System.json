[
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.10",
    "question_text": "The essential content(s) in each entry of a page table is/are\n(A) virtual page number.\n(B) page frame number.\n(C) both virtual page number and page frame number.\n(D) access right information.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory.",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.30",
    "question_text": "Consider a system with 4 types of resources R1 (3 units), R2 (2 units), R3 (3 units), R4 (2 units). A non-preemptive resource allocation policy is used. At any given instance, a request is not entertained if it cannot be completely satisfied. Three processes P1, P2, P3 request the resources as follows if executed independently.\n(process details provided)\nWhich one of the following statements is TRUE if all three processes run concurrently starting at time t = 0?\n(A) All processes will finish without any deadlock.\n(B) Only P1 and P2 will be in deadlock.\n(C) Only P1 and P3 will be in deadlock.\n(D) All three processes will be in deadlock.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Deadlock.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.31",
    "question_text": "Consider a disk system with 100 cylinders. The requests to access the cylinders occur in following sequence : 4, 34, 10, 7, 19, 73, 2, 15, 6, 20.\nAssuming that the head is currently at cylinder 50, what is the time taken to satisfy all requests if it takes 1 ms to move from one cylinder to adjacent one and shortest seek time first policy is used ?\n(A) 95 ms\n(B) 119 ms\n(C) 233 ms\n(D) 276 ms",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "CPU and I/O scheduling.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.32",
    "question_text": "In the following process state transition diagram for a uniprocessor system, assume that there are always some processes in the ready state :\n(diagram provided)\nNow consider the following statements :\nI. If a process makes a transition D, it would result in another process making transition A immediately.\nII. A process P2 in blocked state can make transition E while another process P1 is in running state.\nIII. The OS uses preemptive scheduling.\nIV. The OS uses non-preemptive scheduling.\nWhich of the above statements are TRUE ?\n(A) I and II\n(B) I and III\n(C) II and III\n(D) II and IV",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization.",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.33",
    "question_text": "The enter_CS() and leave_CS() functions to implement critical section of a process are realized using test-and-set instruction as follows :\n(code provided)\nIn the above solution, X is a memory location associated with the CS and is initialized to 0. Now consider the following statements :\nI. The above solution to CS problem is deadlock-free.\nII. The solution is starvation-free.\nIII. The processes enter CS in FIFO order.\nIV. More than one process can enter CS at the same time.\nWhich of the above statements are TRUE ?\n(A) I only\n(B) I and II\n(C) II and III\n(D) IV only",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Concurrency and synchronization. (approximate)",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 0.9
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.34",
    "question_text": "A multilevel page table is preferred in comparison to a single level page table for translating virtual address to physical address because\n(A) it reduces the memory access time to read or write a memory location.\n(B) it helps to reduce the size of page table needed to implement the virtual address space of a process.\n(C) it is required by the translation lookaside buffer.\n(D) it helps to reduce the number of page faults in page replacement algorithms.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory.",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.51",
    "question_text": "A hard disk has 63 sectors per track, 10 platters each with 2 recording surfaces and 1000 cylinders. The address of a sector is given as a triple (c,h,s), where c is the cylinder number, h is the surface number and s is the sector number. Thus, the 0th sector is addressed as (0,0,0), the 1st sector as (0,0,1), and so on.\nThe address (400,16,29) corresponds to sector number:\n(A) 505035\n(B) 505036\n(C) 505037\n(D) 505038",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "File systems.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.52",
    "question_text": "A hard disk has 63 sectors per track, 10 platters each with 2 recording surfaces and 1000 cylinders. The address of a sector is given as a triple (c,h,s), where c is the cylinder number, h is the surface number and s is the sector number. Thus, the 0th sector is addressed as (0,0,0), the 1st sector as (0,0,1), and so on.\nThe address of 1039th sector is\n(A) (0,15,31)\n(B) (0,16,30)\n(C) (0,16,31)\n(D) (0,17,31)",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "File systems.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2009,
    "paper_code": "CS",
    "question_no": "Q.9",
    "question_text": "In which one of the following page replacement policies, Belady's anomaly may occur?\n(A) FIFO\n(B) Optimal\n(C) LRU\n(D) MRU",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory.",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2009 CS",
    "confidence": 1
  },
  {
    "year": 2010,
    "paper_code": "CS",
    "question_no": "23",
    "question_text": "Consider the methods used by processes P1 and P2 for accessing their critical sections whenever needed, as given below. The initial values of shared boolean variables S1 and S2 are randomly assigned.\nMethod used by P1: while (S1 == S2); Critical Section; S1 = S2;\nMethod used by P2: while (S1 != S2); Critical Section; S2 = not(S1);\nWhich one of the following statements describes the properties achieved?\n(A) Mutual exclusion but not progress\n(B) Progress but not mutual exclusion\n(C) Neither mutual exclusion nor progress\n(D) Both mutual exclusion and progress",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATEFORUM 2010 CS",
    "confidence": 1
  },
  {
    "year": 2010,
    "paper_code": "CS",
    "question_no": "24",
    "question_text": "A system uses FIFO policy for page replacement. It has 4 page frames with no pages loaded to begin with. The system first accesses 100 distinct pages in some order and then accesses the same 100 pages but now in the reverse order. How many page faults will occur?\n(A) 196\n(B) 192\n(C) 197\n(D) 195",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATEFORUM 2010 CS",
    "confidence": 1
  },
  {
    "year": 2010,
    "paper_code": "CS",
    "question_no": "25",
    "question_text": "Which of the following statements are true?\nI. Shortest remaining time first scheduling may cause starvation\nII. Preemptive scheduling may cause starvation\nIII. Round robin is better than FCFS in terms of response time\n(A) I only\n(B) I and III only\n(C) II and III only\n(D) I, II and III",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "CPU and I/O scheduling",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATEFORUM 2010 CS",
    "confidence": 1
  },
  {
    "year": 2010,
    "paper_code": "CS",
    "question_no": "45",
    "question_text": "The following program consists of 3 concurrent processes and 3 binary semaphores. The semaphores are initialized as S0=1, S1=0, S2=0.\nProcess P0: while (true) { wait(S0); print '0'; release(S1); release(S2); }\nProcess P1: { wait(S1); release(S0); }\nProcess P2: { wait(S2); release(S0); }\nHow many times will process P0 print '0'?\n(A) At least twice\n(B) Exactly twice\n(C) Exactly thrice\n(D) Exactly once",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATEFORUM 2010 CS",
    "confidence": 1
  },
  {
    "year": 2010,
    "paper_code": "CS",
    "question_no": "46",
    "question_text": "A system has n resources R₀, ..., Rₙ₋₁, and k processes P₀, ..., Pₖ₋₁. The implementation of the resource request logic of each process Pi is as follows:\nif (i%2 == 0) {\n  if (i < n) request Rᵢ;\n  if (i+2 < n) request Rᵢ₊₂;\n} else {\n  if (i < n) request Rₙ₋ᵢ;\n  if (i+2 < n) request Rₙ₋ᵢ₋₂;\n}\nIn which one of the following situations is a deadlock possible?\n(A) n=40, k=26\n(B) n=21, k=12\n(C) n=20, k=10\n(D) n=41, k=19",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Deadlock",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATEFORUM 2010 CS",
    "confidence": 1
  },
  {
    "year": 2011,
    "paper_code": "CS",
    "question_no": "Q.16",
    "question_text": "A thread is usually defined as a \"light weight process” because an operating system (OS) maintains smaller data structures for a thread than for a process. In relation to this, which of the following is TRUE?\n(A) On per-thread basis, the OS maintains only CPU register state\n(B) The OS does not maintain a separate stack for each thread\n(C) On per-thread basis, the OS does not maintain virtual memory state\n(D) On per-thread basis, the OS maintains only scheduling and accounting information",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE2011_CS",
    "confidence": 1
  },
  {
    "year": 2011,
    "paper_code": "CS",
    "question_no": "Q.20",
    "question_text": "Let the page fault service time be 10 ms in a computer with average memory access time being 20 ns. If one page fault is generated for every 10⁶ memory accesses, what is the effective access time for the memory?\n(A) 21 ns\n(B) 30 ns\n(C) 23 ns\n(D) 35 ns",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE2011_CS",
    "confidence": 1
  },
  {
    "year": 2011,
    "paper_code": "CS",
    "question_no": "Q.35",
    "question_text": "Consider the following table of arrival time and burst time for three processes P0, P1 and P2.\n| Process | Arrival time | Burst Time |\n| :--- | :--- | :--- |\n| P0 | 0 ms | 9 ms |\n| P1 | 1 ms | 4 ms |\n| P2 | 2 ms | 9 ms |\nThe pre-emptive shortest job first scheduling algorithm is used. Scheduling is carried out only at arrival or completion of processes. What is the average waiting time for the three processes?\n(A) 5.0 ms\n(B) 4.33 ms\n(C) 6.33 ms\n(D) 7.33 ms",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "CPU and I/O scheduling",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2011_CS",
    "confidence": 1
  },
  {
    "year": 2011,
    "paper_code": "CS",
    "question_no": "Q.6",
    "question_text": "Let the time taken to switch between user and kernel modes of execution be t₁ while the time taken to switch between two processes be t₂. Which of the following is TRUE?\n(A) t₁ > t₂\n(B) t₁ = t₂\n(C) t₁ < t₂\n(D) nothing can be said about the relation between t₁ and t₂",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE2011_CS",
    "confidence": 0.9
  },
  {
    "year": 2012,
    "paper_code": "CS",
    "question_no": "Q.31",
    "question_text": "Consider the 3 processes, P1, P2 and P3 shown in the table. ... The completion order of the 3 processes under the policies FCFS and RR2 (round robin scheduling with CPU quantum of 2 time units) are",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "CPU and I/O scheduling.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2012 Question Paper",
    "confidence": 1
  },
  {
    "year": 2012,
    "paper_code": "CS",
    "question_no": "Q.32",
    "question_text": "Fetch_And_Add(X, i) is an atomic Read-Modify-Write instruction that reads the value of memory location X, increments it by the value i, and returns the old value of X. It is used in the pseudocode shown below to implement a busy-wait lock. ... This implementation ...",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2012 Question Paper",
    "confidence": 1
  },
  {
    "year": 2012,
    "paper_code": "CS",
    "question_no": "Q.41",
    "question_text": "A file system with 300 GByte disk uses a file descriptor with 8 direct block addresses, 1 indirect block address and 1 doubly indirect block address. The size of each disk block is 128 Bytes and the size of each disk block address is 8 Bytes. The maximum possible file size in this file system is",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "File systems.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2012 Question Paper",
    "confidence": 1
  },
  {
    "year": 2012,
    "paper_code": "CS",
    "question_no": "Q.42",
    "question_text": "Consider the virtual page reference string 1, 2, 3, 2, 4, 1, 3, 2, 4, 1 on a demand paged virtual memory system running on a computer system that has main memory size of 3 page frames which are initially empty. Let LRU, FIFO and OPTIMAL denote the number of page faults under the corresponding page replacement policy. Then",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2012 Question Paper",
    "confidence": 1
  },
  {
    "year": 2012,
    "paper_code": "CS",
    "question_no": "Q.8",
    "question_text": "A process executes the code\nfork();\nfork();\nfork();\nThe total number of child processes created is",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization.",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2012 Question Paper",
    "confidence": 1
  },
  {
    "year": 2013,
    "paper_code": "CS",
    "question_no": "Q.10",
    "question_text": "A scheduling algorithm assigns priority proportional to the waiting time of a process. Every process starts with priority zero (the lowest priority). The scheduler re-evaluates the process priorities every T time units and decides the next process to schedule. Which one of the following is TRUE if the processes have no I/O operations and all arrive at time zero?\n(A) This algorithm is equivalent to the first-come-first-serve algorithm.\n(B) This algorithm is equivalent to the round-robin algorithm.\n(C) This algorithm is equivalent to the shortest-job-first algorithm.\n(D) This algorithm is equivalent to the shortest-remaining-time-first algorithm.",
    "subject": "Operating System",
    "chapter": "CPU and I/O scheduling.",
    "subtopic": "CPU and I/O scheduling.",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2013 Paper",
    "confidence": 1
  },
  {
    "year": 2013,
    "paper_code": "CS",
    "question_no": "Q.16",
    "question_text": "Three concurrent processes X, Y, and Z execute three different code segments that access and update certain shared variables. Process X executes the P operation (i.e., wait) on semaphores a, b and c; process Y executes the P operation on semaphores b, c and d; process Z executes the P operation on semaphores c, d, and a before entering the respective code segments. After completing the execution of its code segment, each process invokes the V operation (i.e., signal) on its three semaphores. All semaphores are binary semaphores initialized to one. Which one of the following represents a deadlock-free order of invoking the P operations by the processes?\n(A) X: P(a)P(b)P(c) Y: P(b)P(c)P(d) Z: P(c)P(d)P(a)\n(B) X: P(b)P(a)P(c) Y: P(b)P(c)P(d) Z: P(a)P(c)P(d)\n(C) X: P(b)P(a)P(c) Y: P(c)P(b)P(d) Z: P(a)P(c)P(d)\n(D) X: P(a)P(b)P(c) Y: P(c)P(b)P(d) Z: P(c)P(d)P(a)",
    "subject": "Operating System",
    "chapter": "Deadlock.",
    "subtopic": "Deadlock.",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2013 Paper",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS",
    "question_no": "19",
    "question_text": "Suppose a disk has 201 cylinders, numbered from 0 to 200. At some time the disk arm is at cylinder 100, and there is a queue of disk access requests for cylinders 30, 85, 90, 100, 105, 110, 135 and 145. If Shortest-Seek Time First (SSTF) is being used for scheduling the disk access, the request for cylinder 90 is serviced after servicing _______ number of requests.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "CPU and I/O scheduling",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE2014_CS_OCR",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS",
    "question_no": "20",
    "question_text": "Which one of the following is FALSE?\n(A) User level threads are not scheduled by the kernel.\n(B) When a user level thread is blocked, all other threads of its process are blocked.\n(C) Context switching between user level threads is faster than context switching between kernel level threads.\n(D) Kernel level threads cannot share the code segment.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE2014_CS_OCR",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS",
    "question_no": "31",
    "question_text": "An operating system uses the Banker's algorithm for deadlock avoidance when managing the allocation of three resource types X, Y, and Z to three processes P0, P1, and P2. The table given below presents the current system state... There are 3 units of type X, 2 units of type Y and 2 units of type Z still available. The system is currently in a safe state. Consider the following independent requests for additional resources in the current state:\nREQ1: P0 requests 0 units of X, 0 units of Y and 2 units of Z\nREQ2: P1 requests 2 units of X, 0 units of Y and 0 units of Z\nWhich one of the following is TRUE?\n(A) Only REQ1 can be permitted.\n(B) Only REQ2 can be permitted.\n(C) Both REQ1 and REQ2 can be permitted.\n(D) Neither REQ1 nor REQ2 can be permitted.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Deadlock",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2014_CS_OCR",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS",
    "question_no": "32",
    "question_text": "Consider the following set of processes that need to be scheduled on a single CPU. All the times are given in milliseconds.\nProcess Name | Arrival Time | Execution Time\n--- | --- | ---\nA | 0 | 6\nB | 3 | 2\nC | 5 | 4\nD | 7 | 6\nE | 10 | 3\nUsing the shortest remaining time first scheduling algorithm, the average process turnaround time (in msec) is ______.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "CPU and I/O scheduling",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2014_CS_OCR",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS",
    "question_no": "33",
    "question_text": "Assume that there are 3 page frames which are initially empty. If the page reference string is 1, 2, 3, 4, 2, 1, 5, 3, 2, 4, 6, the number of page faults using the optimal replacement policy is ______.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2014_CS_OCR",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS-2",
    "question_no": "19",
    "question_text": "Which one of the following is TRUE?\n(A) The requirements document also describes how the requirements that are listed in the document are implemented efficiently.\n(B) Consistency and completeness of functional requirements are always achieved in practice.\n(C) Prototyping is a method of requirements validation.\n(D) Requirements review is carried out to find the errors in system design.",
    "subject": "Operating System",
    "chapter": "System calls, processes, threads, inter-process communication, concurrency and synchronization",
    "subtopic": "OTHER: Software Engineering Principles",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2014 CS SET-2",
    "confidence": 0.1
  },
  {
    "year": 2014,
    "paper_code": "CS-2",
    "question_no": "20",
    "question_text": "A FAT (file allocation table) based file system is being used and the total overhead of each entry in the FAT is 4 bytes in size. Given a 100 x 10^6 bytes disk on which the file system is stored and data block size is 10^3 bytes, the maximum size of a file that can be stored on this disk in units of 10^6 bytes is",
    "subject": "Operating System",
    "chapter": "File systems",
    "subtopic": "File systems",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2014 CS SET-2",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS-2",
    "question_no": "31",
    "question_text": "Consider the procedure below for the Producer-Consumer problem which uses semaphores:\nsemaphore n = 0;\nsemaphore s = 1;\nvoid producer() {\n  while(true) {\n    produce();\n    semWait(s);\n    addToBuffer();\n    semSignal(s);\n    semSignal(n);\n  }\n}\nvoid consumer() {\n  while(true) {\n    semWait(n);\n    semWait(s);\n    removeFromBuffer();\n    semSignal(s);\n    consume();\n  }\n}\nWhich one of the following is TRUE?",
    "subject": "Operating System",
    "chapter": "System calls, processes, threads, inter-process communication, concurrency and synchronization",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2014 CS SET-2",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS-2",
    "question_no": "32",
    "question_text": "Three processes A, B and C each execute a loop of 100 iterations. In each iteration of the loop, a process performs a single computation that requires tc CPU milliseconds and then initiates a single I/O operation that lasts for tio milliseconds. It is assumed that the computer where the processes execute has sufficient number of I/O devices and the OS of the computer assigns different I/O devices to each process. Also, the scheduling overhead of the OS is negligible. The processes have the following characteristics:\n| Process id | tc | tio |\n|---|---|---|\n| A | 100 ms | 500 ms |\n| B | 350 ms | 500 ms |\n| C | 200 ms | 500 ms |\nThe processes A, B, and C are started at times 0, 5 and 10 milliseconds respectively, in a pure time sharing system (round robin scheduling) that uses a time slice of 50 milliseconds. The time in milliseconds at which process C would complete its first I/O operation is",
    "subject": "Operating System",
    "chapter": "CPU and I/O scheduling",
    "subtopic": "CPU and I/O scheduling",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2014 CS SET-2",
    "confidence": 1
  },
  {
    "year": 2014,
    "paper_code": "CS-2",
    "question_no": "33",
    "question_text": "A computer has twenty physical page frames which contain pages numbered 101 through 120. Now a program accesses the pages numbered 1, 2, ..., 100 in that order, and repeats the access sequence THRICE. Which one of the following page replacement policies experiences the same number of page faults as the optimal page replacement policy for this program?",
    "subject": "Operating System",
    "chapter": "Memory management and virtual memory",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2014 CS SET-2",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "1",
    "question_text": "The maximum number of processes that can be in Ready state for a computer system with n CPUs is\n(A) n\n(B) n²\n(C) 2ⁿ\n(D) Independent of n",
    "subject": "Operating System",
    "chapter": "System calls, processes, threads, inter-process communication, concurrency and synchronization.",
    "subtopic": "processes",
    "theoretical_practical": "theoretical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "10",
    "question_text": "Two processes X and Y need to access a critical section. Consider the following synchronization construct used by both the processes\n[Code for Process X and Process Y]\nHere, varP and varQ are shared variables and both are initialized to false. Which one of the following statements is true?\n(A) The proposed solution prevents deadlock but fails to guarantee mutual exclusion\n(B) The proposed solution guarantees mutual exclusion but fails to prevent deadlock\n(C) The proposed solution guarantees mutual exclusion and prevents deadlock\n(D) The proposed solution fails to prevent deadlock and fails to guarantee mutual exclusion",
    "subject": "Operating System",
    "chapter": "System calls, processes, threads, inter-process communication, concurrency and synchronization.",
    "subtopic": "concurrency and synchronization.",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "23",
    "question_text": "A system has 6 identical resources and N processes competing for them. Each process can request atmost 2 resources. Which one of the following values of N could lead to a deadlock?\n(A) 1\n(B) 2\n(C) 3\n(D) 4",
    "subject": "Operating System",
    "chapter": "Deadlock",
    "subtopic": "Deadlock",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 Examination - CS (Set 2, 7th February, Afternoon Session)",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "30",
    "question_text": "Consider six memory partitions of sizes 200 KB, 400 KB, 600 KB, 500 KB, 300 KB and 250 KB, where KB refers to kilobyte. These partitions need to be allotted to four processes of sizes 357 KB, 210 KB, 468 KB and 491 KB in that order. If the best fit algorithm is used, which partitions are NOT allotted to any process?\n(A) 200 KB and 300 KB\n(B) 200 KB and 250 KB\n(C) 250 KB and 300 KB\n(D) 300 KB and 400 KB",
    "subject": "Operating System",
    "chapter": "Memory management and virtual memory",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 Examination - CS (Set 2, 7th February, Afternoon Session)",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "34",
    "question_text": "For the processes listed in the following table, which of the following scheduling schemes will give the lowest average turnaround time?\nProcess | Arrival Time | Processing Time\nA | 0 | 3\nB | 1 | 6\nC | 4 | 4\nD | 6 | 2\n(A) First Come First Serve\n(B) Non-preemptive Shortest Job First\n(C) Shortest Remaining Time\n(D) Round Robin with Quantum value two",
    "subject": "Operating System",
    "chapter": "CPU and I/O scheduling.",
    "subtopic": "CPU and I/O scheduling.",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "47",
    "question_text": "A computer system implements 8 kilobyte pages and a 32-bit physical address space. Each page table entry contains a valid bit, a dirty bit, three permission bits, and the translation. If the maximum size of the page table of a process is 24 megabytes, the length of the virtual address supported by the system is __________ bits.",
    "subject": "Operating System",
    "chapter": "Memory management and virtual memory",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": null,
    "provenance": "GATE 2015 Examination - CS (Set 2, 7th February, Afternoon Session)",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "52",
    "question_text": "Consider the following policies for preventing deadlock in a system with mutually exclusive resources.\nI. Processes should acquire all their resources at the beginning of execution. If any resource is not available, all resources acquired so far are released\nII. The resources are numbered uniquely, and processes are allowed to request for resources only in increasing resource numbers\nIII. The resources are numbered uniquely, and processes are allowed to request for resources only in decreasing resource numbers\nIV. The resources are numbered uniquely. A process is allowed to request only for a resource with resource number larger than its currently held resources\nWhich of the above policies can be used for preventing deadlock?\n(A) Any one of I and III but not II or IV\n(B) Any one of I, III, and IV but not II\n(C) Any one of II and III but not I or IV\n(D) Any one of I, II, III, and IV",
    "subject": "Operating System",
    "chapter": "Deadlock.",
    "subtopic": "Deadlock.",
    "theoretical_practical": "theoretical",
    "marks": null,
    "provenance": "GATE 2015 CS Set 3",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 12",
    "question_text": "Consider a system with byte-addressable memory, 32-bit logical addresses, 4 kilobyte page size and page table entries of 4 bytes each. The size of the page table in the system in megabytes is ______",
    "subject": "Operating System",
    "chapter": "Memory management and virtual memory",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 30",
    "question_text": "Suppose the following disk request sequence (track numbers) for a disk with 100 tracks is given: 45, 20, 90, 10, 50, 60, 80, 25, 70. Assume that the initial position of the R/W head is on track 50. The additional distance that will be traversed by the R/W head when the Shortest Seek Time First (SSTF) algorithm is used compared to the SCAN (Elevator) algorithm (assuming that SCAN algorithm moves towards 100 when it starts execution) is ________ tracks.",
    "subject": "Operating System",
    "chapter": "CPU and I/O scheduling",
    "subtopic": "I/O scheduling",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 46",
    "question_text": "Consider a uniprocessor system executing three tasks T₁, T₂ and T₃, each of which is composed of an infinite sequence of jobs (or instances) which arrive periodically at intervals of 3, 7 and 20 milliseconds, respectively. The priority of each task is the inverse of its period, and the available tasks are scheduled in order of priority, with the highest priority task scheduled first. Each instance of T₁, T₂ and T₃ requires an execution time of 1, 2 and 4 milliseconds, respectively. Given that all tasks initially arrive at the beginning of the 1st millisecond and task preemptions are allowed, the first instance of T₃ completes its execution at the end of ________ milliseconds.",
    "subject": "Operating System",
    "chapter": "CPU and I/O scheduling",
    "subtopic": "CPU and I/O scheduling",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 47",
    "question_text": "Consider a main memory with five page frames and the following sequence of page references: 3, 8, 2, 3, 9, 1, 6, 3, 8, 9, 3, 6, 2, 1, 3. Which one of the following is true with respect to page replacement policies First In First Out (FIFO) and Least Recently Used (LRU)?\n(A) Both incur the same number of page faults\n(B) FIFO incurs 2 more page faults than LRU\n(C) LRU incurs 2 more page faults than FIFO\n(D) FIFO incurs 1 more page faults than LRU",
    "subject": "Operating System",
    "chapter": "Memory management and virtual memory",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 1
  },
  {
    "year": 2015,
    "paper_code": "CS",
    "question_no": "Q. 9",
    "question_text": "The following two functions P1 and P2 that share a variable B with an initial value of 2 execute concurrently.\nP1() {\n  C = B - 1;\n  B = 2 * C;\n}\nP2() {\n  D = 2 * B;\n  B = D - 1;\n}\nThe number of distinct values that B can possibly take after the execution is ______",
    "subject": "Operating System",
    "chapter": "System calls, processes, threads, inter-process communication, concurrency and synchronization",
    "subtopic": "concurrency and synchronization",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE_2015_CS_Set1_Feb7_FN",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.20",
    "question_text": "In which one of the following page replacement algorithms it is possible for the page fault rate to increase even when the number of allocated frames increases?\n(A) LRU (Least Recently Used)\n(B) OPT (Optimal Page Replacement)\n(C) MRU (Most Recently Used)\n(D) FIFO (First In First Out)",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2016 CS Set-B",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.20",
    "question_text": "Consider an arbitrary set of CPU-bound processes with unequal CPU burst lengths submitted at the same time to a computer system. Which one of the following process scheduling algorithms would minimize the average waiting time in the ready queue?\n(A) Shortest remaining time first\n(B) Round-robin with time quantum less than the shortest CPU burst\n(C) Uniform random\n(D) Highest priority first with priority proportional to CPU burst length",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "CPU and I/O scheduling",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2016 CS Set A",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.47",
    "question_text": "Consider the following processes, with the arrival time and the length of the CPU burst given in milliseconds. The scheduling algorithm used is preemptive shortest remaining-time first.\nProcess | Arrival Time | Burst Time\n---|---|---\nP₁ | 0 | 10\nP₂ | 3 | 6\nP₃ | 7 | 1\nP₄ | 8 | 3\nThe average turn around time of these processes is __________ milliseconds.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "CPU and I/O scheduling",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2016 CS Set-B",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.48",
    "question_text": "Consider the following two-process synchronization solution.\nProcess 0\n---\nEntry: loop while (turn == 1);\n(critical section)\nExit: turn = 1;\nProcess 1\n---\nEntry: loop while (turn == 0);\n(critical section)\nExit: turn = 0;\nThe shared variable turn is initialized to zero. Which one of the following is TRUE?\n(A) This is a correct two-process synchronization solution.\n(B) This solution violates mutual exclusion requirement.\n(C) This solution violates progress requirement.\n(D) This solution violates bounded wait requirement.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "concurrency and synchronization",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2016 CS Set-B",
    "confidence": 1
  },
  {
    "year": 2016,
    "paper_code": "CS",
    "question_no": "Q.49",
    "question_text": "Consider a non-negative counting semaphore S. The operation P(S) decrements S, and V(S) increments S. During an execution, 20 P(S) operations and 12 V(S) operations are issued in some order. The largest initial value of S for which at least one P(S) operation will remain blocked is __________.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "concurrency and synchronization",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2016 CS Set-B",
    "confidence": 1
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "13",
    "question_text": "Consider the following C code:\n#include <stdio.h>\nint *assignval(int *x, int val) {\n  *x = val;\n  return x;\n}\nvoid main() {\n  int *x = malloc(sizeof(int));\n  if (NULL == x) return;\n  x = assignval(x, 0);\n  if (x) {\n    x = (int *)malloc(sizeof(int));\n    if (NULL == x) return;\n    x = assignval(x, 10);\n  }\n  printf(\"%d\\n\", *x);\n  free(x);\n}\nThe code suffers from which one of the following problems:\n(A) compiler error as the return of malloc is not typecast appropriately\n(B) compiler error because the comparison should be made as x == NULL and not as shown\n(C) compiles successfully but execution may result in dangling pointer\n(D) compiles successfully but execution may result in memory leak",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2017 CS",
    "confidence": 0.7
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "18",
    "question_text": "Threads of a process share\n(A) global variables but not heap.\n(B) heap but not global variables.\n(C) neither global variables nor heap.\n(D) both heap and global variables.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2017 CS",
    "confidence": 1
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "24",
    "question_text": "Consider the following CPU processes with arrival times (in milliseconds) and length of CPU bursts (in milliseconds) as given below:\nProcess | Arrival time | Burst time\nP1 | 0 | 7\nP2 | 3 | 3\nP3 | 5 | 5\nP4 | 6 | 2\nIf the pre-emptive shortest remaining time first scheduling algorithm is used to schedule the processes, then the average waiting time across all processes is ______ milliseconds.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "CPU and I/O scheduling",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2017 CS",
    "confidence": 1
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "27",
    "question_text": "A multithreaded program P executes with x number of threads and uses y number of locks for ensuring mutual exclusion while operating on shared memory locations. All locks in the program are non-reentrant, i.e., if a thread holds a lock l, then it cannot re-acquire lock l without releasing it. If a thread is unable to acquire a lock, it blocks until the lock becomes available. The minimum value of x and the minimum value of y together for which execution of P can result in a deadlock are:\n(A) x = 1, y = 2\n(B) x = 2, y = 1\n(C) x = 2, y = 2\n(D) x = 1, y = 1",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Deadlock",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2017 CS",
    "confidence": 1
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "40",
    "question_text": "Recall that Belady’s anomaly is that the page-fault rate may increase as the number of allocated frames increases. Now, consider the following statements:\nS1: Random page replacement algorithm (where a page chosen at random is replaced) suffers from Belady’s anomaly\nS2: LRU page replacement algorithm suffers from Belady’s anomaly\nWhich of the following is CORRECT?\n(A) S1 is true, S2 is true\n(B) S1 is true, S2 is false\n(C) S1 is false, S2 is true\n(D) S1 is false, S2 is false",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2017 CS",
    "confidence": 1
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "7",
    "question_text": "Which of the following is/are shared by all the threads in a process?\nI. Program counter\nII. Stack\nIII. Address space\nIV. Registers",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "threads",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2017 Session 2",
    "confidence": 1
  },
  {
    "year": 2017,
    "paper_code": "CS",
    "question_no": "8",
    "question_text": "In a file allocation system, which of the following allocation scheme(s) can be used if no external fragmentation is allowed?\nI. Contiguous\nII. Linked\nIII. Indexed",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "File systems",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2017 Session 2",
    "confidence": 1
  },
  {
    "year": 2018,
    "paper_code": "CS",
    "question_no": "10",
    "question_text": "Consider a process executing on an operating system that uses demand paging. The average time for a memory access in the system is M units if the corresponding memory page is available in memory, and D units if the memory access causes a page fault. It has been experimentally measured that the average time taken for a memory access in the process is X units. Which one of the following is the correct expression for the page fault rate experienced by the process?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2018",
    "confidence": 1
  },
  {
    "year": 2018,
    "paper_code": "CS",
    "question_no": "24",
    "question_text": "Consider a system with 3 processes that share 4 instances of the same resource type. Each process can request a maximum of K instances. Resource instances can be requested and released only one at a time. The largest value of K that will always avoid deadlock is ____.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Deadlock",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2018",
    "confidence": 1
  },
  {
    "year": 2018,
    "paper_code": "CS",
    "question_no": "39",
    "question_text": "In a system, there are three types of resources: E, F and G. Four processes P₀, P₁, P₂ and P₃ execute concurrently. At the outset, the processes have declared their maximum resource requirements using a matrix named Max as given below. For example, Max[P₂,F] is the maximum number of instances of F that P₂ would require. The number of instances of the resources allocated to the various processes at any given state is given by a matrix named Allocation.\nConsider a state of the system with the Allocation matrix as shown below, and in which 3 instances of E and 3 instances of F are the only resources available.\nFrom the perspective of deadlock avoidance, which one of the following is true?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Deadlock",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2018",
    "confidence": 1
  },
  {
    "year": 2018,
    "paper_code": "CS",
    "question_no": "40",
    "question_text": "Consider the following solution to the producer-consumer synchronization problem. The shared buffer size is N. Three semaphores empty, full and mutex are defined with respective initial values of 0, N and 1. Semaphore empty denotes the number of available slots in the buffer, for the consumer to read from. Semaphore full denotes the number of available slots in the buffer, for the producer to write to. The placeholder variables, denoted by P, Q, R, and S, in the code below can be assigned either empty or full. The valid semaphore operations are: wait() and signal().\nWhich one of the following assignments to P, Q, R and S will yield the correct solution?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "concurrency and synchronization",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2018",
    "confidence": 1
  },
  {
    "year": 2018,
    "paper_code": "CS",
    "question_no": "53",
    "question_text": "Consider a storage disk with 4 platters (numbered as 0, 1, 2 and 3), 200 cylinders (numbered as 0, 1, ... , 199), and 256 sectors per track (numbered as 0, 1, ... , 255). The following 6 disk requests of the form [sector number, cylinder number, platter number] are received by the disk controller at the same time:\n[120, 72, 2], [180, 134, 1], [60, 20, 0], [212, 86, 3], [56, 116, 2], [118, 16, 1]\nCurrently the head is positioned at sector number 100 of cylinder 80, and is moving towards higher cylinder numbers. The average power dissipation in moving the head over 100 cylinders is 20 milliwatts and for reversing the direction of the head movement once is 15 milliwatts. Power dissipation associated with rotational latency and switching of head between different platters is negligible.\nThe total power consumption in milliwatts to satisfy all of the above disk requests using the Shortest Seek Time First disk scheduling algorithm is ____.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "CPU and I/O scheduling",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2018",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "11",
    "question_text": "Consider allocation of memory to a new process. Assume that none of the existing holes in the memory will exactly fit the process's memory requirement. Hence, a new hole of smaller size will be created if allocation is made in any of the existing holes. Which one of the following statements is TRUE?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "12",
    "question_text": "Consider the following statements about process state transitions for a system using preemptive scheduling.\nI. A running process can move to ready state.\nII. A ready process can move to running state.\nIII. A blocked process can move to running state.\nIV. A blocked process can move to ready state.\nWhich of the above statements are TRUE?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "34",
    "question_text": "Each of a set of n processes executes the following code using two semaphores a and b initialized to 1 and 0, respectively. Assume that count is a shared variable initialized to 0 and not used in CODE SECTION P.\nCODE SECTION P\nwait(a); count=count+1;\nif (count==n) signal (b);\nsignal(a); wait(b); signal (b);\nCODE SECTION Q\nWhat does the code achieve?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "35",
    "question_text": "Consider the following five disk access requests of the form (request id, cylinder number) that are present in the disk scheduler queue at a given time.\n(P, 155), (Q, 85), (R, 110), (S, 30), (T, 115)\nAssume the head is positioned at cylinder 100. The scheduler follows Shortest Seek Time First scheduling to service the requests.\nWhich one of the following statements is FALSE?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "CPU and I/O scheduling",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "50",
    "question_text": "Consider the following set of processes, assumed to have arrived at time 0. Consider the CPU scheduling algorithms Shortest Job First (SJF) and Round Robin (RR). For RR, assume that the processes are scheduled in the order P₁,P₂,P₃,P₄.\nProcesses | P₁ | P₂ | P₃ | P₄\nBurst time (in ms) | 8 | 7 | 2 | 4\nIf the time quantum for RR is 4 ms, then the absolute value of the difference between the average turnaround times (in ms) of SJF and RR (round off to 2 decimal places) is _____",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "CPU and I/O scheduling",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2020,
    "paper_code": "CS",
    "question_no": "53",
    "question_text": "Consider a paging system that uses 1-level page table residing in main memory and a TLB for address translation. Each main memory access takes 100 ns and TLB lookup takes 20 ns. Each page transfer to/from the disk takes 5000 ns. Assume that the TLB hit ratio is 95%, page fault rate is 10%. Assume that for 20% of the total page faults, a dirty page has to be written back to disk before the required page is read in from disk. TLB update time is negligible. The average memory access time in ns (round off to 1 decimal places) is _____",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2020 CS",
    "confidence": 1
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS Q.14",
    "question_text": "Which of the following statement(s) is/are correct in the context of CPU scheduling?\n\n(A) Turnaround time includes waiting time.\n(B) The goal is to only maximize CPU utilization and minimize throughput.\n(C) Round-robin policy can be used even when the CPU time required by each of the processes is not known apriori.\n(D) Implementing preemptive scheduling needs hardware support.",
    "subject": "Section 8: Operating System",
    "chapter": "Operating System",
    "subtopic": "CPU and I/O scheduling",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2021 CS Set-2",
    "confidence": 1.0
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS Q.42",
    "question_text": "Consider the following multi-threaded code segment (in a mix of C and pseudo-code), invoked by two processes P1 and P2, and each of the processes spawns two threads T1 and T2:\n\nint x = 0; // global\nLock L1; // global\nmain() {\n  create a thread to execute foo(); // Thread T1\n  create a thread to execute foo(); // Thread T2\n  wait for the two threads to finish execution;\n  print (x);}\n\nfoo() {\n  int y = 0;\n  Acquire L1;\n  x = x + 1;\n  y = y + 1;\n  Release L1;\n  print (y);}\n\nWhich of the following statement(s) is/are correct?\n\n(A) Both P1 and P2 will print the value of x as 2.\n(B) At least one of P1 and P2 will print the value of x as 4.\n(C) At least one of the threads will print the value of y as 2.\n(D) Both T1 and T2, in both the processes, will print the value of y as 1.",
    "subject": "Section 8: Operating System",
    "chapter": "Operating System",
    "subtopic": "processes, threads, inter-process communication, concurrency and synchronization",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2021 CS Set-2",
    "confidence": 1.0
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS Q.43",
    "question_text": "Consider a computer system with multiple shared resource types, with one instance per resource type. Each instance can be owned by only one process at a time. Owning and freeing of resources are done by holding a global lock (L). The following scheme is used to own a resource instance :\n\nfunction OWNRESOURCE(Resource R)\n  Acquire lock L // a global lock\n  if R is available then\n    Acquire R\n    Release lock L\n  else\n    if R is owned by another process P then\n      Terminate P, after releasing all resources owned by P\n      Acquire R\n      Restart P\n      Release lock L\n    end if\n  end if\nend function\n\nWhich of the following choice(s) about the above scheme is/are correct?\n\n(A) The scheme ensures that deadlocks will not occur.\n(B) The scheme may lead to live-lock.\n(C) The scheme may lead to starvation.\n(D) The scheme violates the mutual exclusion property.",
    "subject": "Section 8: Operating System",
    "chapter": "Operating System",
    "subtopic": "Deadlock",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2021 CS Set-2",
    "confidence": 1.0
  },
  {
    "year": 2021,
    "paper_code": "CS",
    "question_no": "CS Q.48",
    "question_text": "Consider a three-level page table to translate a 39-bit virtual address to a physical address as shown below.\n<-- 39-bit virtual address -->\n| Level 1 offset | Level 2 offset | Level 3 offset | Page offset |\n| 9 bits | 9 bits | 9 bits | 12 bits |\nThe page size is 4KB (1KB = 2¹⁰ bytes) and page table entry size at every level is 8 bytes. A process P is currently using 2GB (1GB = 2³⁰ bytes) virtual memory which is mapped to 2GB of physical memory. The minimum amount of memory required for the page table of P across all levels is _________ KB.",
    "subject": "Section 8: Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2021 CS Set-2",
    "confidence": 1.0
  },
  {
    "year": 2022,
    "paper_code": "CS",
    "question_no": "Q.19",
    "question_text": "Consider the following threads, T1, T2, and T3 executing on a single processor, synchronized using three binary semaphore variables, S1, S2, and S3, operated upon using standard wait() and signal(). The threads can be context switched in any order and at any time.\n\nT1\nwhile(true) {\n  wait(S3);\n  print(\"C\");\n  signal(S2);\n}\n\nT2\nwhile(true) {\n  wait(S1);\n  print(\"B\");\n  signal(S3);\n}\n\nT3\nwhile(true) {\n  wait(S2);\n  print(\"A\");\n  signal(S1);\n}\n\nWhich initialization of the semaphores would print the sequence BCABCABCA....?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "concurrency and synchronization",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2022 CS",
    "confidence": 1
  },
  {
    "year": 2022,
    "paper_code": "CS",
    "question_no": "Q.26",
    "question_text": "Which of the following statements is/are TRUE with respect to deadlocks?\n\n(A) Circular wait is a necessary condition for the formation of deadlock.\n(B) In a system where each resource has more than one instance, a cycle in its wait-for graph indicates the presence of a deadlock.\n(C) If the current allocation of resources to processes leads the system to unsafe state, then deadlock will necessarily occur.\n(D) In the resource-allocation graph of a system, if every edge is an assignment edge, then the system is not in deadlock state.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Deadlock",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE 2022 CS",
    "confidence": 1
  },
  {
    "year": 2022,
    "paper_code": "CS",
    "question_no": "Q.38",
    "question_text": "Which one of the following statements is FALSE?\n\n(A) The TLB performs an associative search in parallel on all its valid entries using page number of incoming virtual address.\n(B) If the virtual address of a word given by CPU has a TLB hit, but the subsequent search for the word results in a cache miss, then the word will always be present in the main memory.\n(C) The memory access time using a given inverted page table is always same for all incoming virtual addresses.\n(D) In a system that uses hashed page tables, if two distinct virtual addresses V1 and V2 map to the same value while hashing, then the memory access time of these addresses will not be the same.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "theoretical",
    "marks": 2,
    "provenance": "GATE 2022 CS",
    "confidence": 1
  },
  {
    "year": 2022,
    "paper_code": "CS",
    "question_no": "Q.42",
    "question_text": "Consider four processes P, Q, R, and S scheduled on a CPU as per round robin algorithm with a time quantum of 4 units. The processes arrive in the order P, Q, R, S, all at time t = 0. There is exactly one context switch from S to Q, exactly one context switch from R to Q, and exactly two context switches from Q to R. There is no context switch from S to P. Switching to a ready process after the termination of another process is also considered a context switch. Which one of the following is NOT possible as CPU burst time (in time units) of these processes?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "CPU and I/O scheduling",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2022 CS",
    "confidence": 1
  },
  {
    "year": 2022,
    "paper_code": "CS",
    "question_no": "Q.63",
    "question_text": "Consider two files systems A and B, that use contiguous allocation and linked allocation, respectively. A file of size 100 blocks is already stored in A and also in B. Now, consider inserting a new block in the middle of the file (between 50th and 51st block), whose data is already available in the memory. Assume that there are enough free blocks at the end of the file and that the file control blocks are already in memory. Let the number of disk accesses required to insert a block in the middle of the file in A and B are n_A and n_B, respectively, then the value of n_A + n_B is ___.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "File systems",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2022 CS",
    "confidence": 1
  },
  {
    "year": 2022,
    "paper_code": "CS",
    "question_no": "Q.64",
    "question_text": "Consider a demand paging system with four page frames (initially empty) and LRU page replacement policy. For the following page reference string\n\n7,2,7,3,2,5,3,4,6,7,7,1,5,6,1\n\nthe page fault rate, defined as the ratio of number of page faults to the number of memory accesses (rounded off to one decimal place) is ___.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2022 CS",
    "confidence": 1
  },
  {
    "year": 2023,
    "paper_code": "CS",
    "question_no": "Q.22",
    "question_text": "Which one or more of the following need to be saved on a context switch from one thread (T1) of a process to another thread (T2) of the same process?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE-2023-CS-Paper",
    "confidence": 1
  },
  {
    "year": 2023,
    "paper_code": "CS",
    "question_no": "Q.23",
    "question_text": "Which one or more of the following options guarantee that a computer system will transition from user mode to kernel mode?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE-2023-CS-Paper",
    "confidence": 1
  },
  {
    "year": 2023,
    "paper_code": "CS",
    "question_no": "Q.27",
    "question_text": "Which one or more of the following CPU scheduling algorithms can potentially cause starvation?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "CPU and I/O scheduling",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE-2023-CS-Paper",
    "confidence": 1
  },
  {
    "year": 2023,
    "paper_code": "CS",
    "question_no": "Q.38",
    "question_text": "Consider the two functions incr and decr shown below, which use a semaphore 's'. There are 5 threads each invoking incr once, and 3 threads each invoking decr once, on the same shared variable X. The initial value of X is 10. Suppose there are two implementations of the semaphore s, as follows: I-1: s is a binary semaphore initialized to 1. I-2: s is a counting semaphore initialized to 2. Let V1, V2 be the values of X at the end of execution of all the threads with implementations I-1, I-2, respectively. Which one of the following choices corresponds to the minimum possible values of V1, V2, respectively?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE-2023-CS-Paper",
    "confidence": 1
  },
  {
    "year": 2023,
    "paper_code": "CS",
    "question_no": "Q.57",
    "question_text": "Consider the following two-dimensional array D in the C programming language, which is stored in row-major order: int D[128][128]; Demand paging is used for allocating memory and each physical page frame holds 512 elements of the array D. The Least Recently Used (LRU) page-replacement policy is used by the operating system. A total of 30 physical page frames are allocated to a process which executes the following code snippet: for (int i = 0; i < 128; i++) for (int j = 0; j < 128; j++) D[j][i] *= 10; The number of page faults generated during the execution of this code snippet is _______.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE-2023-CS-Paper",
    "confidence": 1
  },
  {
    "year": 2023,
    "paper_code": "CS",
    "question_no": "Q.58",
    "question_text": "Consider a computer system with 57-bit virtual addressing using multi-level tree-structured page tables with L levels for virtual to physical address translation. The page size is 4 KB (1 KB = 1024 B) and a page table entry at any of the levels occupies 8 bytes. The value of L is _______.",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE-2023-CS-Paper",
    "confidence": 1
  },
  {
    "year": 2024,
    "paper_code": "Computer Science and Information Technology Set 2 (CS2)",
    "question_no": "Q.24",
    "question_text": "Which of the following tasks is/are the responsibility/responsibilities of the memory management unit (MMU) in a system with paging-based memory management?\n\n(A) Allocate a new page table for a newly created process\n(B) Translate a virtual address to a physical address using the page table\n(C) Raise a trap when a virtual address is not found in the page table\n(D) Raise a trap when a process tries to write to a page marked with read-only permission in the page table",
    "subject": "Operating System",
    "chapter": "Memory management and virtual memory.",
    "subtopic": "Memory management and virtual memory.",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE2024_CS2_IISc",
    "confidence": 1
  },
  {
    "year": 2024,
    "paper_code": "Computer Science and Information Technology Set 2 (CS2)",
    "question_no": "Q.25",
    "question_text": "Consider a process P running on a CPU. Which one or more of the following events will always trigger a context switch by the OS that results in process P moving to a non-running state (e.g., ready, blocked)?\n\n(A) P makes a blocking system call to read a block of data from the disk\n(B) P tries to access a page that is in the swap space, triggering a page fault\n(C) An interrupt is raised by the disk to deliver data requested by some other process\n(D) A timer interrupt is raised by the hardware",
    "subject": "Operating System",
    "chapter": "System calls, processes, threads, inter-process communication, concurrency and synchronization.",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization.",
    "theoretical_practical": "theoretical",
    "marks": 1,
    "provenance": "GATE2024_CS2_IISc",
    "confidence": 1
  },
  {
    "year": 2024,
    "paper_code": "Computer Science and Information Technology Set 2 (CS2)",
    "question_no": "Q.37",
    "question_text": "Consider a single processor system with four processes A, B, C, and D, represented as given below, where for each process the first value is its arrival time, and the second value is its CPU burst time.\nA (0, 10), B (2, 6), C (4, 3), and D (6, 7).\nWhich one of the following options gives the average waiting times when preemptive Shortest Remaining Time First (SRTF) and Non-Preemptive Shortest Job First (NP-SJF) CPU scheduling algorithms are applied to the processes?\n\n(A) SRTF = 6, NP-SJF = 7\n(B) SRTF = 6, NP-SJF = 7.5\n(C) SRTF = 7, NP-SJF = 7.5\n(D) SRTF = 7, NP-SJF = 8.5",
    "subject": "Operating System",
    "chapter": "CPU and I/O scheduling.",
    "subtopic": "CPU and I/O scheduling.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2024_CS2_IISc",
    "confidence": 1
  },
  {
    "year": 2024,
    "paper_code": "Computer Science and Information Technology Set 2 (CS2)",
    "question_no": "Q.46",
    "question_text": "Consider a multi-threaded program with two threads T1 and T2. The threads share two semaphores: s1 (initialized to 1) and s2 (initialized to 0). The threads also share a global variable x (initialized to 0). The threads execute the code shown below.\n// code of T1\nwait(s1);\nx = x+1;\nprint(x);\nwait(s2);\nsignal(s1);\n\n// code of T2\nwait(s1);\nx = x+1;\nprint(x);\nsignal(s2);\nsignal(s1);\nWhich of the following outcomes is/are possible when threads T1 and T2 execute concurrently?",
    "subject": "Operating System",
    "chapter": "System calls, processes, threads, inter-process communication, concurrency and synchronization.",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2024_CS2_IISc",
    "confidence": 1
  },
  {
    "year": 2024,
    "paper_code": "Computer Science and Information Technology Set 2 (CS2)",
    "question_no": "Q.64",
    "question_text": "Consider a 32-bit system with 4 KB page size and page table entries of size 4 bytes each. Assume 1 KB = 2^10 bytes. The OS uses a 2-level page table for memory management, with the page table containing an outer page directory and an inner page table. The OS allocates a page for the outer page directory upon process creation. The OS uses demand paging when allocating memory for the inner page table, i.e., a page of the inner page table is allocated only if it contains at least one valid page table entry. An active process in this system accesses 2000 unique pages during its execution, and none of the pages are swapped out to disk. After it completes the page accesses, let X denote the minimum and Y denote the maximum number of pages across the two levels of the page table of the process. The value of X+Y is ________",
    "subject": "Operating System",
    "chapter": "Memory management and virtual memory.",
    "subtopic": "Memory management and virtual memory.",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE2024_CS2_IISc",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS1",
    "question_no": "Q.14",
    "question_text": "Consider a demand paging memory management system with 32-bit logical address, 20-bit physical address, and page size of 2048 bytes. Assuming that the memory is byte addressable, what is the maximum number of entries in the page table?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2025 CS1 Paper",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS1",
    "question_no": "Q.29",
    "question_text": "Suppose in a multiprogramming environment, the following C program segment is executed. A process goes into I/O queue whenever an I/O related operation is performed. Assume that there will always be a context switch whenever a process requests for an I/O, and also whenever the process returns from an I/O. The number of times the process will enter the ready queue during its lifetime (not counting the time the process enters the ready queue when it is run initially) is ______. (Answer in integer)\n\nint main() {\n  int x=0,i=0;\n  scanf(\"%d\",&x);\n  for(i=0; i<20; i++) {\n    x = x+20;\n    printf(\"%d\\n\",x);\n  }\n  return 0;\n}",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "System calls, processes, threads, inter-process communication, concurrency and synchronization",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2025 CS1 Paper",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS1",
    "question_no": "Q.38",
    "question_text": "A computer has two processors, M1 and M2. Four processes P1, P2, P3, P4 with CPU bursts of 20, 16, 25, and 10 milliseconds, respectively, arrive at the same time and these are the only processes in the system. The scheduler uses non-preemptive priority scheduling, with priorities decided as follows:\n- M1 uses priority of execution for the processes as, P1 > P3 > P2 > P4, i.e., P1 and P4 have highest and lowest priorities, respectively.\n- M2 uses priority of execution for the processes as, P2 > P3 > P4 > P1, i.e., P2 and P1 have highest and lowest priorities, respectively.\nA process Pi is scheduled to a processor Mk, if the processor is free and no other process Pj is waiting with higher priority. At any given point of time, a process can be allocated to any one of the free processors without violating the execution priority rules. Ignore the context switch time. What will be the average waiting time of the processes in milliseconds?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "CPU and I/O scheduling",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2025 CS1 Paper",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS1",
    "question_no": "Q.51",
    "question_text": "A disk of size 512M bytes is divided into blocks of 64K bytes. A file is stored in the disk using linked allocation. In linked allocation, each data block reserves 4 bytes to store the pointer to the next data block. The link part of the last data block contains a NULL pointer (also of 4 bytes). Suppose a file of 1M bytes needs to be stored in the disk. Assume, 1K = 2^10 and 1M = 2^20. The amount of space in bytes that will be wasted due to internal fragmentation is ______. (Answer in integer)",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "File systems",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2025 CS1 Paper",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS1",
    "question_no": "Q.54",
    "question_text": "In optimal page replacement algorithm, information about all future page references is available to the operating system (OS). A modification of the optimal page replacement algorithm is as follows: The OS correctly predicts only up to next 4 page references (including the current page) at the time of allocating a frame to a page. A process accesses the pages in the following order of page numbers: 1, 3, 2, 4, 2, 3, 1, 2, 4, 3, 1, 4. If the system has three memory frames that are initially empty, the number of page faults that will occur during execution of the process is ______. (Answer in integer)",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2025 CS1 Paper",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS2",
    "question_no": "Q.26",
    "question_text": "Processes P1, P2, P3, P4 arrive in that order at times 0, 1, 2, and 8 milliseconds respectively, and have execution times of 10, 13, 6, and 9 milliseconds respectively. Shortest Remaining Time First (SRTF) algorithm is used as the CPU scheduling policy. Ignore context switching times. Which ONE of the following correctly gives the average turnaround time of the four processes in milliseconds?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "CPU and I/O scheduling",
    "theoretical_practical": "practical",
    "marks": 1,
    "provenance": "GATE 2025 Mock",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS2",
    "question_no": "Q.47",
    "question_text": "Consider a demand paging system with three frames, and the following page reference string: 1 2 3 4 5 4 1 6 4 5 1 3 2. The contents of the frames are as follows initially and after each reference (from left to right):\n\nThe *-marked references cause page replacements.\nWhich one or more of the following could be the page replacement policy/policies in use?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2025 Mock",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS2",
    "question_no": "Q.48",
    "question_text": "P = {P1, P2, P3, P4} consists of all active processes in an operating system.\nR = {R1, R2, R3, R4} consists of single instances of distinct types of resources in the system.\nThe resource allocation graph has the following assignment and claim edges.\nAssignment edges: R₁ → P₁, R₂ → P₂, R₃ → P₃, R₄ → P₄ (the assignment edge R₁ → P₁ means resource R₁ is assigned to process P₁, and so on for others)\nClaim edges: P₁ → R₂, P₂ → R₃, P₃ → R₁, P₂ → R₄, P₄ → R₂ (the claim edge P₁ → R₂ means process P₁ is waiting for resource R₂, and so on for others)\nWhich of the following statement(s) is/are CORRECT?",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Deadlock",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2025 Mock",
    "confidence": 1
  },
  {
    "year": 2025,
    "paper_code": "CS2",
    "question_no": "Q.58",
    "question_text": "A computer system supports a logical address space of 2³² bytes. It uses two-level hierarchical paging with a page size of 4096 bytes. A logical address is divided into a b-bit index to the outer page table, an offset within the page of the inner page table, and an offset within the desired page. Each entry of the inner page table uses eight bytes. All the pages in the system have the same size.\n\nThe value of b is __________.\n(Answer in integer)",
    "subject": "Operating System",
    "chapter": "Operating System",
    "subtopic": "Memory management and virtual memory",
    "theoretical_practical": "practical",
    "marks": 2,
    "provenance": "GATE 2025 Mock",
    "confidence": 1
  }
]